# Add categorical variable names on the left
text(rep(0.5, length(categorical_vars)), seq_along(categorical_vars), categorical_vars, adj = c(1, 0.5), col = "blue")
# Add subsets of continuous variable names on the right
for (i in seq_along(categorical_vars)) {
subset_vars <- continuous_subsets[[i]]
if (length(subset_vars) > 0) {
text(rep(i * 5/8, length(subset_vars)), seq_along(subset_vars) + i - 1, subset_vars, adj = c(0.5, 0.5), col = "red")
}
}
# Add legend
legend("topright", legend = c("Categorical", "Continuous"), fill = c("blue", "red"))
# Create example categorical and continuous variable names
categorical_vars <- c("Category_A", "Category_B", "Category_C")
continuous_vars <- c("Var1", "Var2", "Var3", "Var4", "Var5")
# Define subsets of continuous variables for each categorical variable
continuous_subsets <- list(
Category_A = c("Var1", "Var2"),
Category_B = c("Var3", "Var4"),
Category_C = c("Var5")
)
# Combine variable names for plotting
plot_vars <- c(categorical_vars, unlist(continuous_subsets))
# Set up the plotting area
plot(0, 0, type = "n", xlim = c(0, 4), ylim = c(0, length(plot_vars) + 1),
xlab = "", ylab = "", xaxt = "n", yaxt = "n")
# Add categorical variable names on the left
text(rep(0.5, length(categorical_vars)), seq_along(categorical_vars), categorical_vars, adj = c(1, 0.5), col = "blue")
# Add subsets of continuous variable names on the right
for (i in seq_along(categorical_vars)) {
subset_vars <- continuous_subsets[[i]]
if (length(subset_vars) > 0) {
text(rep(i, length(subset_vars)), seq_along(subset_vars) + i - 1, subset_vars, adj = c(0.5, 0.5), col = "red")
}
}
categorical_vars <- c("Category_A", "Category_B", "Category_C")
continuous_vars <- c("Var1", "Var2", "Var3", "Var4", "Var5")
# Define subsets of continuous variables for each categorical variable
continuous_subsets <- list(
Category_A = c("Var1", "Var2"),
Category_B = c("Var3", "Var4"),
Category_C = c("Var5")
)
# Combine variable names for plotting
plot_vars <- c(categorical_vars, unlist(continuous_subsets))
# Set up the plotting area
plot(0, 0, type = "n", xlim = c(0, 4), ylim = c(0, length(plot_vars) + 1),
xlab = "", ylab = "", xaxt = "n", yaxt = "n")
# Add categorical variable names on the left
text(rep(0.5, length(categorical_vars)), seq_along(categorical_vars), categorical_vars, adj = c(1, 0.5), col = "blue")
# Add subsets of continuous variable names on the right
for (i in seq_along(categorical_vars)) {
subset_vars <- continuous_subsets[[i]]
if (length(subset_vars) > 0) {
text(rep(i, length(subset_vars)), seq_along(subset_vars) + i - 1, subset_vars, adj = c(0, 0.5), col = "red")
}
}
# Add legend
legend("topright", legend = c("Categorical", "Continuous"), fill = c("blue", "red"))
# Create example categorical and continuous variable names
categorical_vars <- c("Category_A", "Category_B", "Category_C")
continuous_vars <- c("Var1", "Var2", "Var3", "Var4", "Var5")
# Define subsets of continuous variables for each categorical variable
continuous_subsets <- list(
Category_A = c("Var1", "Var2"),
Category_B = c("Var3", "Var4"),
Category_C = c("Var5")
)
# Combine variable names for plotting
plot_vars <- c(categorical_vars, unlist(continuous_subsets))
# Set up the plotting area
plot(0, 0, type = "n", xlim = c(0, 4), ylim = c(0, length(plot_vars) + 1),
xlab = "", ylab = "", xaxt = "n", yaxt = "n")
# Add categorical variable names on the left
text(rep(0.5, length(categorical_vars)), seq_along(categorical_vars), categorical_vars, adj = c(1, 0.5), col = "blue")
# Add subsets of continuous variable names on the right
for (i in seq_along(categorical_vars)) {
subset_vars <- continuous_subsets[[i]]
if (length(subset_vars) > 0) {
text(rep(i, length(subset_vars)), seq_along(subset_vars) + i - 1, subset_vars, adj = c(1, 0.5), col = "red")
}
}
# Add legend
legend("topright", legend = c("Categorical", "Continuous"), fill = c("blue", "red"))
# Create example categorical and continuous variable names
categorical_vars <- c("Category_A", "Category_B", "Category_C")
continuous_vars <- c("Var1", "Var2", "Var3", "Var4", "Var5")
# Define subsets of continuous variables for each categorical variable
continuous_subsets <- list(
Category_A = c("Var1", "Var2"),
Category_B = c("Var3", "Var4"),
Category_C = c("Var5")
)
# Combine variable names for plotting
plot_vars <- c(categorical_vars, unlist(continuous_subsets))
# Set up the plotting area
plot(0, 0, type = "n", xlim = c(0, 4.5), ylim = c(0, length(plot_vars) + 1),
xlab = "", ylab = "", xaxt = "n", yaxt = "n")
# Add categorical variable names on the left
text(rep(0.5, length(categorical_vars)), seq_along(categorical_vars), categorical_vars, adj = c(1, 0.5), col = "blue")
# Add subsets of continuous variable names on the right
for (i in seq_along(categorical_vars)) {
subset_vars <- continuous_subsets[[i]]
if (length(subset_vars) > 0) {
text(rep(i, length(subset_vars)), seq_along(subset_vars) + i - 1, subset_vars, adj = c(1, 0.5), col = "red")
}
}
# Add legend
legend("topright", legend = c("Categorical", "Continuous"), fill = c("blue", "red"))
# Create example categorical and continuous variable names
categorical_vars <- c("Category_A", "Category_B", "Category_C")
continuous_vars <- c("Var1", "Var2", "Var3", "Var4", "Var5")
# Define subsets of continuous variables for each categorical variable
continuous_subsets <- list(
Category_A = c("Var1", "Var2"),
Category_B = c("Var3", "Var4"),
Category_C = c("Var5")
)
# Combine variable names for plotting
plot_vars <- c(categorical_vars, unlist(continuous_subsets))
# Set up the plotting area
plot(0, 0, type = "n", xlim = c(0, 4.2), ylim = c(0, length(plot_vars) + 1),
xlab = "", ylab = "", xaxt = "n", yaxt = "n")
# Add categorical variable names on the left
text(rep(0.5, length(categorical_vars)), seq_along(categorical_vars), categorical_vars, adj = c(1, 0.5), col = "blue")
# Add subsets of continuous variable names on the right
for (i in seq_along(categorical_vars)) {
subset_vars <- continuous_subsets[[i]]
if (length(subset_vars) > 0) {
text(rep(i, length(subset_vars)), seq_along(subset_vars) + i - 1, subset_vars, adj = c(1, 0.5), col = "red")
}
}
# Add legend
legend("topright", legend = c("Categorical", "Continuous"), fill = c("blue", "red"))
# Create example categorical and continuous variable names
categorical_vars <- c("Category_A", "Category_B", "Category_C")
continuous_vars <- c("Var1", "Var2", "Var3", "Var4", "Var5")
# Define subsets of continuous variables for each categorical variable
continuous_subsets <- list(
Category_A = c("Var1", "Var2"),
Category_B = c("Var3", "Var4"),
Category_C = c("Var5")
)
# Combine variable names for plotting
plot_vars <- c(categorical_vars, unlist(continuous_subsets))
# Set up the plotting area
plot(0, 0, type = "n", xlim = c(5, 4.2), ylim = c(0, length(plot_vars) + 1),
xlab = "", ylab = "", xaxt = "n", yaxt = "n")
# Add categorical variable names on the left
text(rep(0.5, length(categorical_vars)), seq_along(categorical_vars), categorical_vars, adj = c(1, 0.5), col = "blue")
# Add subsets of continuous variable names on the right
for (i in seq_along(categorical_vars)) {
subset_vars <- continuous_subsets[[i]]
if (length(subset_vars) > 0) {
text(rep(i, length(subset_vars)), seq_along(subset_vars) + i - 1, subset_vars, adj = c(1, 0.5), col = "red")
}
}
# Add legend
legend("topright", legend = c("Categorical", "Continuous"), fill = c("blue", "red"))
# Create example categorical and continuous variable names
categorical_vars <- c("Category_A", "Category_B", "Category_C")
continuous_vars <- c("Var1", "Var2", "Var3", "Var4", "Var5")
# Define subsets of continuous variables for each categorical variable
continuous_subsets <- list(
Category_A = c("Var1", "Var2"),
Category_B = c("Var3", "Var4"),
Category_C = c("Var5")
)
# Combine variable names for plotting
plot_vars <- c(categorical_vars, unlist(continuous_subsets))
# Set up the plotting area
plot(0, 0, type = "n", xlim = c(0, 4.2), ylim = c(0, length(plot_vars) + 1),
xlab = "", ylab = "", xaxt = "n", yaxt = "n")
# Add categorical variable names on the left
text(rep(0.5, length(categorical_vars)), seq_along(categorical_vars), categorical_vars, adj = c(1, 0.5), col = "blue")
# Add subsets of continuous variable names on the right
for (i in seq_along(categorical_vars)) {
subset_vars <- continuous_subsets[[i]]
if (length(subset_vars) > 0) {
text(rep(i, length(subset_vars)), seq_along(subset_vars) + i - 1, subset_vars, adj = c(1, 0.5), col = "red")
}
}
# Add legend
legend("topright", legend = c("Categorical", "Continuous"), fill = c("blue", "red"))
# Create example categorical and continuous variable names
categorical_vars <- c("Key", "Mode", "Time signature")
continuous_vars <- c("Followers", "Acousticness", "Danceability", "Duration",
"Energy", "Instumentalness", "Loudness", "Tempo", "Valence")
# Define subsets of continuous variables for each categorical variable
continuous_subsets <- list(
Key = c("Followers", "Danceability", "Energy"),
Mode = c("Followers", "Acousticeness", "Energy", "Loudness"),
Time_signature = c("Acousticness", "Danceability", "Duration",
"Energy", "Instumentalness", "Loudness", "Tempo", "Valence")
)
# Combine variable names for plotting
plot_vars <- c(categorical_vars, unlist(continuous_subsets))
# Set up the plotting area
plot(0, 0, type = "n", xlim = c(0, 4.2), ylim = c(0, length(plot_vars) + 1),
xlab = "", ylab = "", xaxt = "n", yaxt = "n")
# Add categorical variable names on the left
text(rep(0.5, length(categorical_vars)), seq_along(categorical_vars), categorical_vars, adj = c(1, 0.5), col = "blue")
# Add subsets of continuous variable names on the right
for (i in seq_along(categorical_vars)) {
subset_vars <- continuous_subsets[[i]]
if (length(subset_vars) > 0) {
text(rep(i, length(subset_vars)), seq_along(subset_vars) + i - 1, subset_vars, adj = c(1, 0.5), col = "red")
}
}
# Add legend
legend("topright", legend = c("Categorical", "Continuous"), fill = c("blue", "red"))
tinytex::install_tinytex()
### Data Preprocessing
# Set the working directory to this file's folder
library("rstudioapi")
setwd(dirname(getActiveDocumentContext()$path))
load("final_df_n_str.RData")
Sys.setenv(LANG = "en")
#install.packages("correlation")
#install.packages("confintr")
#install.packages("ROSE")
#install.packages("caret")
#install.packages("glmnet")
library(pROC)
library(MASS)
library(ROSE)
library(confintr)
library(ggplot2)
library(correlation)
library(corrplot)
library(class)
library(caret)
library(glmnet)
# Selecting the relevant variables
data = final_df_n_str
data = data[,c("track_name", "artist_name", "IsWinner", "Year","year", "followers", "acousticness", "danceability", "duration_ms",
"energy", "instrumentalness", "key", "liveness", "loudness", "mode",
"tempo", "time_signature", "valence")]
# Merge the two year variable
data$Year[data$Year == "Undefined"] <- data$year[data$Year == "Undefined"]
data = data[,c("track_name","artist_name", "IsWinner", "Year", "followers", "acousticness", "danceability", "duration_ms",
"energy", "instrumentalness", "key", "liveness", "loudness", "mode",
"tempo", "time_signature", "valence")]
# Eliminating duplicates
data$track_name == "Closing Time"
data$track_name == "Smells Like Teen Spirit"
data$track_name == "Don't Wanna Fight"
data[914, ]
data[789,]
data[669,]
data = data[-c(669, 789, 914),]
sum(data$Year < 1992)
nrow(data)
data = data[!data$Year < 1992,]
# Creating row names
names = paste0(data$track_name, " - ", data$artist_name)
# Eliminating unusable variables
data = data[,c("IsWinner", "Year", "followers", "acousticness", "danceability", "duration_ms",
"energy", "instrumentalness", "key", "liveness", "loudness", "mode",
"tempo", "time_signature", "valence")]
data = cbind(names = names, data)
# Casting variables
data$IsWinner[data$IsWinner == "Winner"] = 1
data$IsWinner[data$IsWinner == "Nominee"] = 1
data$IsWinner[data$IsWinner == "Nothing"] = 0
data$IsWinner = as.integer(data$IsWinner)
data$Year = as.integer(data$Year)
data$mode = as.factor(data$mode)
data$key = as.factor(data$key)
data$time_signature = as.factor(data$time_signature)
summary(data)
# Checking balance between classes
length(data$IsWinner[data$IsWinner == 0]) / (length(data$IsWinner[data$IsWinner == 0]) + length(data$IsWinner[data$IsWinner == 1]))
length(data$IsWinner[data$IsWinner == 1]) / (length(data$IsWinner[data$IsWinner == 0]) + length(data$IsWinner[data$IsWinner == 1]))
# Splitting training and test set
training_size = floor(0.8 * nrow(data))
set.seed(42)
train_ind = sample(seq_len(nrow(data)), size = training_size)
training_set = data[train_ind,]
test_set = data[-train_ind,]
summary(training_set)
# Checking if the ratio is preserved
length(training_set$IsWinner[data$IsWinner == 0]) / (length(training_set$IsWinner[data$IsWinner == 0]) + length(training_set$IsWinner[data$IsWinner == 1]))
length(training_set$IsWinner[data$IsWinner == 1]) / (length(training_set$IsWinner[data$IsWinner == 0]) + length(training_set$IsWinner[data$IsWinner == 1]))
length(test_set$IsWinner[data$IsWinner == 0]) / (length(test_set$IsWinner[data$IsWinner == 0]) + length(test_set$IsWinner[data$IsWinner == 1]))
length(test_set$IsWinner[data$IsWinner == 1]) / (length(test_set$IsWinner[data$IsWinner == 0]) + length(test_set$IsWinner[data$IsWinner == 1]))
###############################################################################
# Exploratory Data Analysis
# Relationship between independent variables
attach(training_set)
# Correlations between continuous variables
cor_matrix = cor(training_set[,c(-1, -2, -10, -13, -15)])
# corrplot(cor_matrix, method='number')
# dev.new(width=10, height=5, unit="in")
png(file="corplot_indep_1.png",
width=1200, height=1000, pointsize = 26)
corrplot.mixed(cor_matrix, tl.pos='lt')
dev.off()
#pairs(training_set[,c(-1, -2, -10, -13, -15)], lower.panel = panel.smooth)
# Send pairs() to png to resize and visualize better
png(file = "corplot_indep_2.png", width = 1200, height = 1000, pointsize=20)
pairs(training_set[,c(-1, -2, -10, -13, -15)], lower.panel = panel.smooth)
dev.off()  # important!
# Association measure for categorical variables (Cramer's V is a normalized
# version of the chi-square statistics)
cramersv(matrix(c(as.numeric(key), as.numeric(mode)), ncol = 2))
cramersv(matrix(c(as.numeric(key), as.numeric(time_signature)), ncol = 2))
cramersv(matrix(c(as.numeric(mode), as.numeric(time_signature)), ncol = 2))
# Association between continuous and categorical variables
# Key
fol_key.aov <- aov(followers ~ key)
summary(fol_key.aov) # SIGNIFICANT
aco_key.aov <- aov(acousticness ~ key)
summary(aco_key.aov)
dan_key.aov <- aov(danceability ~ key)
summary(dan_key.aov) # SIGNIFICANT
dur_key.aov <- aov(duration_ms ~ key)
summary(dur_key.aov)
ene_key.aov <- aov(energy ~ key)
summary(ene_key.aov) # SIGNIFICANT
ins_key.aov <- aov(instrumentalness ~ key)
summary(ins_key.aov)
liv_key.aov <- aov(liveness ~ key)
summary(liv_key.aov)
loud_key.aov <- aov(loudness ~ key)
summary(loud_key.aov)
tem_key.aov <- aov(tempo ~ key)
summary(tem_key.aov)
val_key.aov <- aov(valence ~ key)
summary(val_key.aov)
# Mode
fol_mode.aov <- aov(followers ~ mode)
summary(fol_mode.aov) # SIGNIFICANT
aco_mode.aov <- aov(acousticness ~ mode)
summary(aco_mode.aov) # SIGNIFICANT
dan_mode.aov <- aov(danceability ~ mode)
summary(dan_mode.aov)
dur_mode.aov <- aov(duration_ms ~ mode)
summary(dur_mode.aov)
ene_mode.aov <- aov(energy ~ mode)
summary(ene_mode.aov) # SIGNIFICANT
ins_mode.aov <- aov(instrumentalness ~ mode)
summary(ins_mode.aov)
liv_mode.aov <- aov(liveness ~ mode)
summary(liv_mode.aov)
loud_mode.aov <- aov(loudness ~ mode)
summary(loud_mode.aov) # SIGNIFICANT
tem_mode.aov <- aov(tempo ~ mode)
summary(tem_mode.aov)
val_mode.aov <- aov(valence ~ mode)
summary(val_mode.aov)
# Time signature
fol_time.aov <- aov(followers ~ time_signature)
summary(fol_time.aov)
aco_time.aov <- aov(acousticness ~ time_signature)
summary(aco_time.aov) # SIGNIFICANT
dan_time.aov <- aov(danceability ~ time_signature)
summary(dan_time.aov) # SIGNIFICANT
dur_time.aov <- aov(duration_ms ~ time_signature)
summary(dur_time.aov) # SIGNIFICANT
ene_time.aov <- aov(energy ~ time_signature)
summary(ene_time.aov) # SIGNIFICANT
ins_time.aov <- aov(instrumentalness ~ time_signature)
summary(ins_time.aov) # SIGNIFICANT
liv_time.aov <- aov(liveness ~ time_signature)
summary(liv_time.aov)
loud_time.aov <- aov(loudness ~ time_signature)
summary(loud_time.aov) # SIGNIFICANT
tem_time.aov <- aov(tempo ~ time_signature)
summary(tem_time.aov) # SIGNIFICANT
val_time.aov <- aov(valence ~ time_signature)
summary(val_time.aov) # SIGNIFICANT
# Partial correlations
correlation(training_set[,c(-1, -2, -10, -13, -15)], partial = TRUE)
# Plots of variables with the largest partial correlation
ggplot(data = training_set, aes(danceability, valence)) + geom_jitter(color = "blue")
ggplot(data = training_set, aes(loudness, energy)) + geom_jitter(color = "blue")
ggplot(data = training_set, aes(acousticness, energy)) + geom_jitter(color = "blue")
# Plots of variables with the largest partial correlation
ggplot(data = training_set, aes(danceability, valence)) + geom_jitter(color = "blue")
ggplot(data = training_set, aes(loudness, energy)) + geom_jitter(color = "blue")
ggplot(data = training_set, aes(acousticness, energy)) + geom_jitter(color = "blue")
# Plots of variables with the largest partial correlation
ggplot(data = training_set, aes(danceability, valence)) + geom_jitter(color = "blue")
ggplot(data = training_set, aes(loudness, energy)) + geom_jitter(color = "blue")
ggplot(data = training_set, aes(acousticness, energy)) + geom_jitter(color = "blue")
logistic = glm(IsWinner ~ ., data = training_set[,c(-1,-2)], family = "binomial")
summary(logistic)
# Stepwise variable selection
log_back = stepAIC(logistic, direction = "backward")
log_for = stepAIC(logistic, direction = "forward")
log_both =  stepAIC(logistic, direction = "both")
log_back = stepAIC(logistic, direction = "backward")
log_for = stepAIC(logistic, direction = "forward")
log_both =  stepAIC(logistic, direction = "both")
log_both =  stepAIC(logistic, direction = "both")
log_both =  stepAIC(logistic, direction = "both")
logistic_reduced = glm(IsWinner ~ Year + followers + acousticness + duration_ms + valence, data = training_set,  family = "binomial")
summary(logistic_reduced)
logistic_predictions = predict(logistic_reduced, newdata = test_set[,c(-1, -2)], type = "response")
logistic_predictions_02 = ifelse(logistic_predictions > 0.2, 1, 0)
logistic_accuracy_02 = sum(logistic_predictions_02 == test_set[2]) / dim(test_set[2])[1]
table(test_set$IsWinner, logistic_predictions_02)
false_positive_logistic_02 = table(test_set$IsWinner, logistic_predictions_02)[3]
negative_logistic_02 = table(test_set$IsWinner, logistic_predictions_02)[1] + table(test_set$IsWinner, logistic_predictions_02)[2]
typeIerror_logistic_02 = false_positive_logistic_02 / negative_logistic_02
true_positive_logistic_02 = table(test_set$IsWinner, logistic_predictions_02)[4]
positive_logistic_02 = table(test_set$IsWinner, logistic_predictions_02)[2] + table(test_set$IsWinner, logistic_predictions_02)[4]
sensitivity_logistic_02 = true_positive_logistic_02 / positive_logistic_02
typeIerror_logistic_02
sensitivity_logistic_02
logistic_predictions_03 = ifelse(logistic_predictions > 0.3, 1, 0)
logistic_accuracy_03 = sum(logistic_predictions_03 == test_set[2]) / dim(test_set[2])[1]
table(test_set$IsWinner, logistic_predictions_03)
false_positive_logistic_03 = table(test_set$IsWinner, logistic_predictions_03)[3]
negative_logistic_03 = table(test_set$IsWinner, logistic_predictions_03)[1] + table(test_set$IsWinner, logistic_predictions_03)[2]
typeIerror_logistic_03 = false_positive_logistic_03 / negative_logistic_03
true_positive_logistic_03 = table(test_set$IsWinner, logistic_predictions_03)[4]
positive_logistic_03 = table(test_set$IsWinner, logistic_predictions_03)[2] + table(test_set$IsWinner, logistic_predictions_03)[4]
sensitivity_logistic_03 = true_positive_logistic_03 / positive_logistic_03
typeIerror_logistic_03
sensitivity_logistic_03
logistic_predictions_04 = ifelse(logistic_predictions > 0.4, 1, 0)
logistic_accuracy_04 = sum(logistic_predictions_04 == test_set[2]) / dim(test_set[2])[1]
table(test_set$IsWinner, logistic_predictions_04)
false_positive_logistic_04 = table(test_set$IsWinner, logistic_predictions_04)[3]
negative_logistic_04 = table(test_set$IsWinner, logistic_predictions_04)[1] + table(test_set$IsWinner, logistic_predictions_04)[2]
typeIerror_logistic_04 = false_positive_logistic_04 / negative_logistic_04
true_positive_logistic_04 = table(test_set$IsWinner, logistic_predictions_04)[4]
positive_logistic_04 = table(test_set$IsWinner, logistic_predictions_04)[2] + table(test_set$IsWinner, logistic_predictions_04)[4]
sensitivity_logistic_04 = true_positive_logistic_04 / positive_logistic_04
typeIerror_logistic_04 = false_positive_logistic_04 / negative_logistic_04
typeIerror_logistic_04
sensitivity_logistic_04
log_back = stepAIC(logistic, direction = "backward")
summary(logistic_reduced)
log_both =  stepAIC(logistic, direction = "both")
log_both =  stepAIC(logistic, direction = "both")
# Fitting the reduced model
logistic_reduced = glm(IsWinner ~ Year + followers + acousticness + duration_ms + valence, data = training_set,  family = "binomial")
summary(logistic_reduced)
logistic = glm(IsWinner ~ ., data = training_set[,c(-1,-2)], family = "binomial")
summary(logistic)
logistic_predictions_full = predict(logistic, newdata = test_set[,c(-1, -2)], type = "response")
# Threshold = 0.2
logistic_predictions_full_02 = ifelse(logistic_predictions_full > 0.2, 1, 0)
logistic_accuracy_full_02 = sum(logistic_predictions_full_02 == test_set[2]) / dim(test_set[2])[1]
table(test_set$IsWinner, logistic_predictions_full_02)
false_positive_logistic_full_02 = table(test_set$IsWinner, logistic_predictions_full_02)[3]
negative_logistic_full_02 = table(test_set$IsWinner, logistic_predictions_full_02)[1] + table(test_set$IsWinner, logistic_predictions_full_02)[2]
typeIerror_logistic_full_02 = false_positive_logistic_full_02 / negative_logistic_full_02
true_positive_logistic_full_02 = table(test_set$IsWinner, logistic_predictions_full_02)[4]
positive_logistic_full_02 = table(test_set$IsWinner, logistic_predictions_full_02)[2] + table(test_set$IsWinner, logistic_predictions_full_02)[4]
sensitivity_logistic_full_02 = true_positive_logistic_full_02 / positive_logistic_full_02
# Threshold = 0.3
logistic_predictions_full_03 = ifelse(logistic_predictions_full > 0.3, 1, 0)
logistic_accuracy_full_03 = sum(logistic_predictions_full_03 == test_set[2]) / dim(test_set[2])[1]
table(test_set$IsWinner, logistic_predictions_full_03)
false_positive_logistic_full_03 = table(test_set$IsWinner, logistic_predictions_full_03)[3]
negative_logistic_full_03 = table(test_set$IsWinner, logistic_predictions_full_03)[1] + table(test_set$IsWinner, logistic_predictions_full_03)[2]
typeIerror_logistic_full_03 = false_positive_logistic_full_03 / negative_logistic_full_03
true_positive_logistic_full_03 = table(test_set$IsWinner, logistic_predictions_full_03)[4]
positive_logistic_full_03 = table(test_set$IsWinner, logistic_predictions_full_03)[2] + table(test_set$IsWinner, logistic_predictions_full_03)[4]
sensitivity_logistic_full_03 = true_positive_logistic_full_03 / positive_logistic_full_03
# Threshold = 0.4
logistic_predictions_full_04 = ifelse(logistic_predictions_full > 0.4, 1, 0)
logistic_accuracy_full_04 = sum(logistic_predictions_full_04 == test_set[2]) / dim(test_set[2])[1]
table(test_set$IsWinner, logistic_predictions_full_04)
false_positive_logistic_full_04 = table(test_set$IsWinner, logistic_predictions_full_04)[3]
negative_logistic_full_04 = table(test_set$IsWinner, logistic_predictions_full_04)[1] + table(test_set$IsWinner, logistic_predictions_full_04)[2]
typeIerror_logistic_full_04 = false_positive_logistic_full_04 / negative_logistic_full_04
true_positive_logistic_full_04 = table(test_set$IsWinner, logistic_predictions_full_04)[4]
positive_logistic_full_04 = table(test_set$IsWinner, logistic_predictions_full_04)[2] + table(test_set$IsWinner, logistic_predictions_full_04)[4]
sensitivity_logistic_full_04 = true_positive_logistic_full_04 / positive_logistic_full_04
# ROC curve
roc.out <- roc(test_set$IsWinner, logistic_predictions_full)
plot(roc.out, print.auc=TRUE, legacy.axes=TRUE, xlab="False positive rate", ylab="True positive rate")
auc(roc.out)
ogistic_predictions = predict(logistic_reduced, newdata = test_set[,c(-1, -2)], type = "response")
# Threshold = 0.2
logistic_predictions_02 = ifelse(logistic_predictions > 0.2, 1, 0)
logistic_accuracy_02 = sum(logistic_predictions_02 == test_set[2]) / dim(test_set[2])[1]
table(test_set$IsWinner, logistic_predictions_02)
false_positive_logistic_02 = table(test_set$IsWinner, logistic_predictions_02)[3]
negative_logistic_02 = table(test_set$IsWinner, logistic_predictions_02)[1] + table(test_set$IsWinner, logistic_predictions_02)[2]
typeIerror_logistic_02 = false_positive_logistic_02 / negative_logistic_02
true_positive_logistic_02 = table(test_set$IsWinner, logistic_predictions_02)[4]
positive_logistic_02 = table(test_set$IsWinner, logistic_predictions_02)[2] + table(test_set$IsWinner, logistic_predictions_02)[4]
sensitivity_logistic_02 = true_positive_logistic_02 / positive_logistic_02
# Threshold = 0.3
logistic_predictions_03 = ifelse(logistic_predictions > 0.3, 1, 0)
logistic_accuracy_03 = sum(logistic_predictions_03 == test_set[2]) / dim(test_set[2])[1]
table(test_set$IsWinner, logistic_predictions_03)
false_positive_logistic_03 = table(test_set$IsWinner, logistic_predictions_03)[3]
negative_logistic_03 = table(test_set$IsWinner, logistic_predictions_03)[1] + table(test_set$IsWinner, logistic_predictions_03)[2]
typeIerror_logistic_03 = false_positive_logistic_03 / negative_logistic_03
true_positive_logistic_03 = table(test_set$IsWinner, logistic_predictions_03)[4]
positive_logistic_03 = table(test_set$IsWinner, logistic_predictions_03)[2] + table(test_set$IsWinner, logistic_predictions_03)[4]
sensitivity_logistic_03 = true_positive_logistic_03 / positive_logistic_03
# Threshold = 0.4
logistic_predictions_04 = ifelse(logistic_predictions > 0.4, 1, 0)
logistic_accuracy_04 = sum(logistic_predictions_04 == test_set[2]) / dim(test_set[2])[1]
table(test_set$IsWinner, logistic_predictions_04)
false_positive_logistic_04 = table(test_set$IsWinner, logistic_predictions_04)[3]
negative_logistic_04 = table(test_set$IsWinner, logistic_predictions_04)[1] + table(test_set$IsWinner, logistic_predictions_04)[2]
typeIerror_logistic_04 = false_positive_logistic_04 / negative_logistic_04
true_positive_logistic_04 = table(test_set$IsWinner, logistic_predictions_04)[4]
positive_logistic_04 = table(test_set$IsWinner, logistic_predictions_04)[2] + table(test_set$IsWinner, logistic_predictions_04)[4]
sensitivity_logistic_04 = true_positive_logistic_04 / positive_logistic_04
# ROC curve
roc.out <- roc(test_set$IsWinner, logistic_predictions)
plot(roc.out, print.auc=TRUE, legacy.axes=TRUE, xlab="False positive rate", ylab="True positive rate")
auc(roc.out)
