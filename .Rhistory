cat("Error in retrieving audio features:", http_status(response)$message, "\n")
return(NULL)
}
}
get_track_info <- function(search_for) {
success <- TRUE
# Construct the API request URL
url <- "https://api.spotify.com/v1/search"
# Set up the API authorization header
token <- paste0("Bearer ", spotify_access_token)
# Set up the API request parameters
params <- list(
q = search_for,
type = 'track',
limit = 1
)
# Send the API request
response <- httr::GET(url, add_headers(Authorization = token), query = params)
if (http_status(response)$category == "Success") {
# Parse the JSON response
track_info <- jsonlite::fromJSON(httr::content(response, "text"))
if (length(track_info$tracks$item) != 0) {
# Extract relevant information from the response
artist <- track_info$tracks$items$artists[[1]]$name
name <- track_info$tracks$items$name
year <- substr(track_info$tracks$items$album$release_date, 1, 4)
track_id <- track_info$tracks$items$id
href <- track_info$tracks$href
} else {
cat("Error in track info Spotify: Song not found", "\n")
success <- FALSE
}
} else {
cat("Error in track info Spotify:", http_status(response)$message, "\n")
success <- FALSE
}
cont <<- cont + 1
if (success == TRUE) {
cat("\014")
cat("Progress: ", 100*cont/1963, " %")
return(c(list(artist = artist, name = name, year = year, track_id = track_id, href = href), get_audio_features(track_id)))
} else {
return(NULL)
}
}
grammyspoti <- get_grammy_total()
get_grammy_total <- function() {
awards <- data.frame(matrix(ncol = 5, nrow = 0))
for (edition in 1:65) {
suffix <- 'th'
if (edition > 13 | edition < 4) {
if (substr(edition, nchar(edition), nchar(edition)) == 1) {
suffix <- 'st'
} else if (substr(edition, nchar(edition), nchar(edition)) == 2) {
suffix <- 'nd'
} else if(substr(edition, nchar(edition), nchar(edition)) == 3) {
suffix <- 'rd'
}
}
year <- 1957 + edition
year1 <- paste0('-', year)
if (year < 2017) {
year1 <- ''
}
# Construct the API request URL
url <- paste0("https://www.grammy.com/_next/data/wamWA3jCekTtdI96fdeIU/awards/", edition, suffix, "-annual-grammy-awards", year1, ".json")
params <- list(
slug = paste0(edition, suffix, "-annual-grammy-awards")
)
# Send the API request
response <- httr::GET(url, add_headers(Authorization = token), query = params)
if (http_status(response)$category == "Success") {
# Parse the JSON response
grammy_info <- fromJSON(httr::content(response, "text", encoding = "UTF-8"), simplifyVector = FALSE)
# Extract relevant information from the response
categories <- grammy_info$pageProps$pageContent$getAwardsYears$hits[[1]]$categoryDetails
#print(typeof(categories))
x <- c("Year", "GrammyAward", "Song", "Artist", "IsWinner")
colnames(awards) <- x
for (category in categories) {
#print(category$title[1])
for (nomination in category$nominations) {
if ((category$title[[1]]$name == 'Song Of The Year') | (category$title[[1]]$name == 'Record Of The Year')) {
if (nomination$displayLine2[[1]] != '') {
if (substr(nomination$displayLine2[[1]][[1]], 1, 1) == '<') {
rartist <- str_match(nomination$displayLine2[[1]], "<a[^>]*>([^<]*)</a>")
rartist <- rartist[1, 2]
} else {
rartist <- nomination$displayLine2[[1]]
}
} else {
rartist <- str_match(nomination$displayLine3[[1]], "\\(([^\\)]*)\\)")
rartist <- rartist[1, 2]
}
#print(rartist[1, 2])
awards[nrow(awards) + 1,] <- c(year, category$title[[1]]$name, nomination$title[[1]], rartist, nomination$isWinner)
}
}
}
} else {
cat("Error in retrieving data:", http_status(response)$message, "\n")
}
}
return(awards)
}
setwd("/Users/joanorellanarios/Library/CloudStorage/GoogleDrive-joanorellanarios@gmail.com/La meva unitat/Master/Second Semester/Statistical Learning Mod B/SL_Project")
# Set up your API credentials for Spotify and YouTube
spotify_client_id <- '74a2687466954d4e92633e8f0f370cce'
spotify_client_secret <- '953a979b453d49c582a46ce3034f818b'
Sys.setenv(SPOTIFY_CLIENT_ID = spotify_client_id)
Sys.setenv(SPOTIFY_CLIENT_SECRET = spotify_client_secret)
spotify_access_token <- get_spotify_access_token()
cont <- 0
get_audio_features <- function(track_id) {
access_token <- get_spotify_access_token()
# Construct the API request URL
url <- paste0("https://api.spotify.com/v1/audio-features/", track_id)
# Set up the API authorization header
token <- paste0("Bearer ", spotify_access_token)
# Send the API request
response <- httr::GET(url, add_headers(Authorization = token))
if (http_status(response)$category == "Success") {
# Parse the JSON response
track_info <- jsonlite::fromJSON(httr::content(response, "text"))
# Extract relevant information from the response
acousticness <- track_info$acousticness
danceability <- track_info$danceability
duration_ms <- track_info$duration_ms
energy <- track_info$energy
instrumentalness <- track_info$instrumentalness
key <- track_info$key
liveness <- track_info$liveness
loudness <- track_info$loudness
mode <- track_info$mode
tempo <- track_info$tempo
time_signature <- track_info$time_signature
valence <- track_info$valence
return(list(acousticness = acousticness, danceability = danceability, duration_ms = duration_ms,
energy = energy, instrumentalness = instrumentalness, key = key, liveness = liveness,
loudness = loudness, mode = mode, tempo = tempo, time_signature = time_signature, valence = valence))
} else {
cat("Error in retrieving audio features:", http_status(response)$message, "\n")
return(NULL)
}
}
get_track_info <- function(search_for) {
success <- TRUE
# Construct the API request URL
url <- "https://api.spotify.com/v1/search"
# Set up the API authorization header
token <- paste0("Bearer ", spotify_access_token)
# Set up the API request parameters
params <- list(
q = search_for,
type = 'track',
limit = 1
)
# Send the API request
response <- httr::GET(url, add_headers(Authorization = token), query = params)
if (http_status(response)$category == "Success") {
# Parse the JSON response
track_info <- jsonlite::fromJSON(httr::content(response, "text"))
if (length(track_info$tracks$item) != 0) {
# Extract relevant information from the response
artist <- track_info$tracks$items$artists[[1]]$name
name <- track_info$tracks$items$name
year <- substr(track_info$tracks$items$album$release_date, 1, 4)
track_id <- track_info$tracks$items$id
href <- track_info$tracks$href
} else {
cat("Error in track info Spotify: Song not found", "\n")
success <- FALSE
}
} else {
cat("Error in track info Spotify:", http_status(response)$message, "\n")
success <- FALSE
}
cont <<- cont + 1
if (success == TRUE) {
cat("\014")
cat("Progress: ", 100*cont/1963, " %")
return(c(list(artist = artist, name = name, year = year, track_id = track_id, href = href), get_audio_features(track_id)))
} else {
return(NULL)
}
}
grammyspoti <- get_grammy_total()
get_track_info <- function(search_for) {
success <- TRUE
# Construct the API request URL
url <- "https://api.spotify.com/v1/search"
# Set up the API authorization header
token <- paste0("Bearer ", spotify_access_token)
# Set up the API request parameters
params <- list(
q = search_for,
type = 'track',
limit = 1
)
# Send the API request
response <- httr::GET(url, add_headers(Authorization = token), query = params)
if (http_status(response)$category == "Success") {
# Parse the JSON response
track_info <- jsonlite::fromJSON(httr::content(response, "text"))
if (length(track_info$tracks$item) != 0) {
# Extract relevant information from the response
artist <- track_info$tracks$items$artists[[1]]$name
name <- track_info$tracks$items$name
year <- substr(track_info$tracks$items$album$release_date, 1, 4)
track_id <- track_info$tracks$items$id
href <- track_info$tracks$href
} else {
cat("Error in track info Spotify: Song not found", "\n")
success <- FALSE
}
} else {
cat("Error in track info Spotify:", http_status(response)$message, "\n")
success <- FALSE
}
cont <<- cont + 1
if (success == TRUE) {
cat("\014")
cat("Progress: ", 100*cont/478, " %")
return(c(list(artist = artist, name = name, year = year, track_id = track_id, href = href), get_audio_features(track_id)))
} else {
return(NULL)
}
}
#grammyspoti$rartist <- gsub("(?i)(featuring|&|,|\\.|'|;|\\(|\\?).*", "", grammyspoti$Artist, perl = TRUE)
grammyspoti$unique <- paste(substr(grammyspoti$Artist, 1, 20), " ", grammyspoti$Song)
# Create a new column 'search_for'
grammyspoti <- grammyspoti %>%
rowwise() %>%
#mutate(search_for = paste0('%20track:', gsub(' ', '%20', Song), '%20artist:',
#                                       gsub(' ', '%20', rartist),
#                                       '%20year:', Year)) %>%
mutate(search_for = paste0(gsub(' ', '+', Song), '+', gsub(' ', '+', Artist))) %>%
ungroup()
# Apply the get_track_info() function to the 'search_for' field and create a new column 'track_info'
grammyspoti <- grammyspoti %>%
mutate(track_info = map(search_for, get_track_info))
# Unnest the 'track_info' column into separate columns
grammyspoti <- grammyspoti %>%
unnest_wider(track_info)
compare <- grammyspoti[c('Year', 'Song', 'name', 'Artist', 'artist', 'unique', 'href', 'search_for', 'GrammyAward')]
matches_song <- logical(length(compare$Song))
matches_artist <- logical(length(compare$Artist))
for (i in 1:length(compare$Song)) {
matches_song[i] <- stringdist::stringdist(compare$Song[i], compare$name[i], method = "jw") <= 0.3
}
for (i in 1:length(compare$Artist)) {
matches_artist[i] <- stringdist::stringdist(compare$Artist[i], compare$artist[i], method = "jw") <= 0.3
}
compare$bool_song <- matches_song
compare$bool_artist <- matches_artist
compare <- filter(compare, compare$bool_song == FALSE | compare$bool_artist == FALSE)
# Set up your API credentials for Spotify and YouTube
spotify_client_id <- '74a2687466954d4e92633e8f0f370cce'
spotify_client_secret <- '953a979b453d49c582a46ce3034f818b'
Sys.setenv(SPOTIFY_CLIENT_ID = spotify_client_id)
Sys.setenv(SPOTIFY_CLIENT_SECRET = spotify_client_secret)
spotify_access_token <- get_spotify_access_token()
cont <- 0
get_audio_features <- function(track_id) {
access_token <- get_spotify_access_token()
# Construct the API request URL
url <- paste0("https://api.spotify.com/v1/audio-features/", track_id)
# Set up the API authorization header
token <- paste0("Bearer ", spotify_access_token)
# Send the API request
response <- httr::GET(url, add_headers(Authorization = token))
if (http_status(response)$category == "Success") {
# Parse the JSON response
track_info <- jsonlite::fromJSON(httr::content(response, "text"))
# Extract relevant information from the response
acousticness <- track_info$acousticness
danceability <- track_info$danceability
duration_ms <- track_info$duration_ms
energy <- track_info$energy
instrumentalness <- track_info$instrumentalness
key <- track_info$key
liveness <- track_info$liveness
loudness <- track_info$loudness
mode <- track_info$mode
tempo <- track_info$tempo
time_signature <- track_info$time_signature
valence <- track_info$valence
return(list(acousticness = acousticness, danceability = danceability, duration_ms = duration_ms,
energy = energy, instrumentalness = instrumentalness, key = key, liveness = liveness,
loudness = loudness, mode = mode, tempo = tempo, time_signature = time_signature, valence = valence))
} else {
cat("Error in retrieving audio features:", http_status(response)$message, "\n")
return(NULL)
}
}
get_track_info <- function(search_for) {
success <- TRUE
# Construct the API request URL
url <- "https://api.spotify.com/v1/search"
# Set up the API authorization header
token <- paste0("Bearer ", spotify_access_token)
# Set up the API request parameters
params <- list(
q = search_for,
type = 'track',
limit = 1
)
# Send the API request
response <- httr::GET(url, add_headers(Authorization = token), query = params)
if (http_status(response)$category == "Success") {
# Parse the JSON response
track_info <- jsonlite::fromJSON(httr::content(response, "text"))
if (length(track_info$tracks$item) != 0) {
# Extract relevant information from the response
artist <- track_info$tracks$items$artists[[1]]$name
name <- track_info$tracks$items$name
year <- substr(track_info$tracks$items$album$release_date, 1, 4)
track_id <- track_info$tracks$items$id
href <- track_info$tracks$href
} else {
cat("Error in track info Spotify: Song not found", "\n")
success <- FALSE
}
} else {
cat("Error in track info Spotify:", http_status(response)$message, "\n")
success <- FALSE
}
cont <<- cont + 1
if (success == TRUE) {
cat("\014")
cat("Progress: ", 100*cont/478, " %")
return(c(list(artist = artist, name = name, year = year, track_id = track_id, href = href), get_audio_features(track_id)))
} else {
return(NULL)
}
}
grammyspoti <- get_grammy_total()
get_track_info <- function(search_for) {
success <- TRUE
# Construct the API request URL
url <- "https://api.spotify.com/v1/search"
# Set up the API authorization header
token <- paste0("Bearer ", spotify_access_token)
# Set up the API request parameters
params <- list(
q = search_for,
type = 'track',
limit = 1
)
# Send the API request
response <- httr::GET(url, add_headers(Authorization = token), query = params)
if (http_status(response)$category == "Success") {
# Parse the JSON response
track_info <- jsonlite::fromJSON(httr::content(response, "text"))
if (length(track_info$tracks$item) != 0) {
# Extract relevant information from the response
artist <- track_info$tracks$items$artists[[1]]$name
name <- track_info$tracks$items$name
year <- substr(track_info$tracks$items$album$release_date, 1, 4)
track_id <- track_info$tracks$items$id
href <- track_info$tracks$href
} else {
cat("Error in track info Spotify: Song not found", "\n")
success <- FALSE
}
} else {
cat("Error in track info Spotify:", http_status(response)$message, "\n")
success <- FALSE
}
cont <<- cont + 1
if (success == TRUE) {
cat("\014")
cat("Progress: ", 100*cont/695, " %")
return(c(list(artist = artist, name = name, year = year, track_id = track_id, href = href), get_audio_features(track_id)))
} else {
return(NULL)
}
}
#grammyspoti$rartist <- gsub("(?i)(featuring|&|,|\\.|'|;|\\(|\\?).*", "", grammyspoti$Artist, perl = TRUE)
grammyspoti$unique <- paste(substr(grammyspoti$Artist, 1, 20), " ", grammyspoti$Song)
# Create a new column 'search_for'
grammyspoti <- grammyspoti %>%
rowwise() %>%
#mutate(search_for = paste0('%20track:', gsub(' ', '%20', Song), '%20artist:',
#                                       gsub(' ', '%20', rartist),
#                                       '%20year:', Year)) %>%
mutate(search_for = paste0(gsub(' ', '+', str_replace_all(Song, "\\([^\\)]*\\)", "")), '+', gsub(' ', '+', Artist))) %>%
ungroup()
# Apply the get_track_info() function to the 'search_for' field and create a new column 'track_info'
grammyspoti <- grammyspoti %>%
mutate(track_info = map(search_for, get_track_info))
# Unnest the 'track_info' column into separate columns
grammyspoti <- grammyspoti %>%
unnest_wider(track_info)
compare <- grammyspoti[c('Year', 'Song', 'name', 'Artist', 'artist', 'unique', 'href', 'search_for', 'GrammyAward')]
matches_song <- logical(length(compare$Song))
matches_artist <- logical(length(compare$Artist))
for (i in 1:length(compare$Song)) {
matches_song[i] <- stringdist::stringdist(compare$Song[i], compare$name[i], method = "jw") <= 0.3
}
for (i in 1:length(compare$Artist)) {
matches_artist[i] <- stringdist::stringdist(compare$Artist[i], compare$artist[i], method = "jw") <= 0.3
}
compare$bool_song <- matches_song
compare$bool_artist <- matches_artist
compare <- filter(compare, compare$bool_song == FALSE | compare$bool_artist == FALSE)
get_spotify_access_token()
grammyspoti <- get_grammy_total()
#grammyspoti$rartist <- gsub("(?i)(featuring|&|,|\\.|'|;|\\(|\\?).*", "", grammyspoti$Artist, perl = TRUE)
grammyspoti$unique <- paste(substr(grammyspoti$Artist, 1, 20), " ", grammyspoti$Song)
# Create a new column 'search_for'
grammyspoti <- grammyspoti %>%
rowwise() %>%
#mutate(search_for = paste0('%20track:', gsub(' ', '%20', Song), '%20artist:',
#                                       gsub(' ', '%20', rartist),
#                                       '%20year:', Year)) %>%
#mutate(search_for = paste0(gsub(' ', '+', str_replace_all(Song, "\\([^\\)]*\\)", "")), '+', gsub(' ', '+', Artist))) %>%
mutate(search_for = paste0(str_replace_all(Song, "\\([^\\)]*\\)", ""), Artist)) %>%
ungroup()
# Apply the get_track_info() function to the 'search_for' field and create a new column 'track_info'
grammyspoti <- grammyspoti %>%
mutate(track_info = map(search_for, get_track_info))
# Unnest the 'track_info' column into separate columns
grammyspoti <- grammyspoti %>%
unnest_wider(track_info)
compare <- grammyspoti[c('Year', 'Song', 'name', 'Artist', 'artist', 'unique', 'href', 'search_for', 'GrammyAward')]
matches_song <- logical(length(compare$Song))
matches_artist <- logical(length(compare$Artist))
for (i in 1:length(compare$Song)) {
matches_song[i] <- stringdist::stringdist(compare$Song[i], compare$name[i], method = "jw") <= 0.3
}
for (i in 1:length(compare$Artist)) {
matches_artist[i] <- stringdist::stringdist(compare$Artist[i], compare$artist[i], method = "jw") <= 0.3
}
compare$bool_song <- matches_song
compare$bool_artist <- matches_artist
compare <- filter(compare, compare$bool_song == TRUE & compare$bool_artist == TRUE)
compare <- grammyspoti[c('Year', 'Song', 'name', 'Artist', 'artist', 'unique', 'href', 'search_for', 'GrammyAward')]
matches_song <- logical(length(compare$Song))
matches_artist <- logical(length(compare$Artist))
for (i in 1:length(compare$Song)) {
matches_song[i] <- stringdist::stringdist(compare$Song[i], compare$name[i], method = "jw") <= 0.3
}
for (i in 1:length(compare$Artist)) {
matches_artist[i] <- stringdist::stringdist(compare$Artist[i], compare$artist[i], method = "jw") <= 0.3
}
compare$bool_song <- matches_song
compare$bool_artist <- matches_artist
compare <- filter(compare, compare$bool_song == FALSE | compare$bool_artist == FALSE)
grammyspoti <- get_grammy_total()
#grammyspoti$rartist <- gsub("(?i)(featuring|&|,|\\.|'|;|\\(|\\?).*", "", grammyspoti$Artist, perl = TRUE)
grammyspoti$unique <- paste(substr(grammyspoti$Artist, 1, 20), " ", grammyspoti$Song)
# Create a new column 'search_for'
grammyspoti <- grammyspoti %>%
rowwise() %>%
#mutate(search_for = paste0('%20track:', gsub(' ', '%20', Song), '%20artist:',
#                                       gsub(' ', '%20', rartist),
#                                       '%20year:', Year)) %>%
#mutate(search_for = paste0(gsub(' ', '+', str_replace_all(Song, "\\([^\\)]*\\)", "")), '+', gsub(' ', '+', Artist))) %>%
mutate(search_for = paste0(str_replace_all(Song, "\\([^\\)]*\\)", ""), '+', Artist)) %>%
ungroup()
# Apply the get_track_info() function to the 'search_for' field and create a new column 'track_info'
grammyspoti <- grammyspoti %>%
mutate(track_info = map(search_for, get_track_info))
# Unnest the 'track_info' column into separate columns
grammyspoti <- grammyspoti %>%
unnest_wider(track_info)
compare <- grammyspoti[c('Year', 'Song', 'name', 'Artist', 'artist', 'unique', 'href', 'search_for', 'GrammyAward')]
matches_song <- logical(length(compare$Song))
matches_artist <- logical(length(compare$Artist))
for (i in 1:length(compare$Song)) {
matches_song[i] <- stringdist::stringdist(compare$Song[i], compare$name[i], method = "jw") <= 0.3
}
for (i in 1:length(compare$Artist)) {
matches_artist[i] <- stringdist::stringdist(compare$Artist[i], compare$artist[i], method = "jw") <= 0.3
}
compare$bool_song <- matches_song
compare$bool_artist <- matches_artist
compare <- filter(compare, compare$bool_song == FALSE | compare$bool_artist == FALSE)
matches_song[i] <- stringdist::stringdist(compare$Song[i], compare$name[i], method = "jw") <= 0.4
for (i in 1:length(compare$Song)) {
matches_song[i] <- stringdist::stringdist(compare$Song[i], compare$name[i], method = "jw") <= 0.4
}
for (i in 1:length(compare$Artist)) {
matches_artist[i] <- stringdist::stringdist(compare$Artist[i], compare$artist[i], method = "jw") <= 0.4
}
compare$bool_song <- matches_song
compare <- grammyspoti[c('Year', 'Song', 'name', 'Artist', 'artist', 'unique', 'href', 'search_for', 'GrammyAward')]
matches_song <- logical(length(compare$Song))
matches_artist <- logical(length(compare$Artist))
for (i in 1:length(compare$Song)) {
matches_song[i] <- stringdist::stringdist(compare$Song[i], compare$name[i], method = "jw") <= 0.4
}
for (i in 1:length(compare$Artist)) {
matches_artist[i] <- stringdist::stringdist(compare$Artist[i], compare$artist[i], method = "jw") <= 0.4
}
compare$bool_song <- matches_song
compare$bool_artist <- matches_artist
compare <- filter(compare, compare$bool_song == FALSE | compare$bool_artist == FALSE)
compare <- grammyspoti[c('Year', 'Song', 'name', 'Artist', 'artist', 'unique', 'href', 'search_for', 'GrammyAward')]
matches_song <- logical(length(compare$Song))
matches_artist <- logical(length(compare$Artist))
for (i in 1:length(compare$Song)) {
matches_song[i] <- stringdist::stringdist(compare$Song[i], compare$name[i], method = "jw") <= 0.4
}
for (i in 1:length(compare$Artist)) {
matches_artist[i] <- stringdist::stringdist(compare$Artist[i], compare$artist[i], method = "jw") <= 0.4
}
compare$bool_song <- matches_song
compare$bool_artist <- matches_artist
compare <- filter(compare, compare$bool_song == TRUE & compare$bool_artist == TRUE)
View(compare)
