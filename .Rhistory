summary(val_key.aov)
# Mode
fol_mode.aov <- aov(followers ~ mode)
summary(fol_mode.aov) # SIGNIFICANT
aco_mode.aov <- aov(acousticness ~ mode)
summary(aco_mode.aov) # SIGNIFICANT
dan_mode.aov <- aov(danceability ~ mode)
summary(dan_mode.aov)
dur_mode.aov <- aov(duration_ms ~ mode)
summary(dur_mode.aov)
ene_mode.aov <- aov(energy ~ mode)
summary(ene_mode.aov) # SIGNIFICANT
ins_mode.aov <- aov(instrumentalness ~ mode)
summary(ins_mode.aov)
liv_mode.aov <- aov(liveness ~ mode)
summary(liv_mode.aov)
loud_mode.aov <- aov(loudness ~ mode)
summary(loud_mode.aov) # SIGNIFICANT
tem_mode.aov <- aov(tempo ~ mode)
summary(tem_mode.aov)
val_mode.aov <- aov(valence ~ mode)
summary(val_mode.aov)
# Time signature
fol_time.aov <- aov(followers ~ time_signature)
summary(fol_time.aov)
aco_time.aov <- aov(acousticness ~ time_signature)
summary(aco_time.aov) # SIGNIFICANT
dan_time.aov <- aov(danceability ~ time_signature)
summary(dan_time.aov) # SIGNIFICANT
dur_time.aov <- aov(duration_ms ~ time_signature)
summary(dur_time.aov) # SIGNIFICANT
ene_time.aov <- aov(energy ~ time_signature)
summary(ene_time.aov) # SIGNIFICANT
ins_time.aov <- aov(instrumentalness ~ time_signature)
summary(ins_time.aov) # SIGNIFICANT
liv_time.aov <- aov(liveness ~ time_signature)
summary(liv_time.aov)
loud_time.aov <- aov(loudness ~ time_signature)
summary(loud_time.aov) # SIGNIFICANT
tem_time.aov <- aov(tempo ~ time_signature)
summary(tem_time.aov) # SIGNIFICANT
val_time.aov <- aov(valence ~ time_signature)
summary(val_time.aov) # SIGNIFICANT
# Partial correlations
correlation(training_set[,c(-1, -2, -10, -13, -15)], partial = TRUE)
# Plots of variables with the largest partial correlation
ggplot(data = training_set, aes(danceability, valence)) + geom_jitter(color = "blue")
ggplot(data = training_set, aes(loudness, energy)) + geom_jitter(color = "blue")
ggplot(data = training_set, aes(acousticness, energy)) + geom_jitter(color = "blue")
#Weird song veeeeeeeeeeeeeeeeeeeeeeeery long
which.max(data$duration_ms)
data[504, ]
##############
par(mfrow= c(2, 5))
hist(followers)
hist(acousticness)
hist(danceability)
hist(duration_ms)
hist(energy)
hist(instrumentalness)
hist(liveness)
hist(loudness)
hist(tempo)
hist(valence)
par(mfrow = c(1, 3))
par(mfrow= c(2, 5))
# Send pairs() to png to resize and visualize better
png(file = "distrib_contin_hist.png", width = 1200, height = 1000, pointsize=20)
hist(followers)
hist(acousticness)
hist(danceability)
hist(duration_ms)
hist(energy)
hist(instrumentalness)
hist(liveness)
hist(loudness)
hist(tempo)
hist(valence)
dev.off()  # important!
# Send pairs() to png to resize and visualize better
png(file = "distrib_contin_hist.png", width = 1200, height = 1000, pointsize=15)
hist(followers)
hist(acousticness)
hist(danceability)
hist(duration_ms)
hist(energy)
hist(instrumentalness)
hist(liveness)
hist(loudness)
hist(tempo)
hist(valence)
dev.off()  # important!
par(mfrow= c(2, 5))
# Send pairs() to png to resize and visualize better
png(file = "distrib_contin_hist.png", width = 1200, height = 1000, pointsize=15)
hist(followers)
hist(acousticness)
hist(danceability)
hist(duration_ms)
hist(energy)
hist(instrumentalness)
hist(liveness)
hist(loudness)
hist(tempo)
hist(valence)
dev.off()  # important!
# Send pairs() to png to resize and visualize better
# png(file = "distrib_contin_hist.png", width = 1200, height = 1000, pointsize=15)
cex.main=0.75
hist(followers)
hist(acousticness)
hist(danceability)
hist(duration_ms)
hist(energy)
par(mfrow= c(2, 5))
# Send pairs() to png to resize and visualize better
# png(file = "distrib_contin_hist.png", width = 1200, height = 1000, pointsize=15)
cex.main=0.5
hist(followers)
hist(acousticness)
hist(danceability)
hist(duration_ms)
par(mfrow= c(2, 5))
# Send pairs() to png to resize and visualize better
# png(file = "distrib_contin_hist.png", width = 1200, height = 1000, pointsize=15)
cex.main=0.25
hist(followers)
hist(acousticness)
hist(danceability)
par(mfrow= c(2, 5))
# Send pairs() to png to resize and visualize better
# png(file = "distrib_contin_hist.png", width = 1200, height = 1000, pointsize=15)
cex.main=2
hist(followers)
hist(acousticness)
hist(danceability)
par(mfrow= c(2, 5))
# Send pairs() to png to resize and visualize better
# png(file = "distrib_contin_hist.png", width = 1200, height = 1000, pointsize=15)
title('Histogram of Attributes')
hist(followers)
hist(acousticness)
hist(danceability)
hist(duration_ms)
par(mfrow= c(2, 5))
# Send pairs() to png to resize and visualize better
# png(file = "distrib_contin_hist.png", width = 1200, height = 1000, pointsize=15)
title('Histogram of Attributes', line = -21, outer = TRUE)
hist(followers)
hist(acousticness)
hist(danceability)
hist(duration_ms)
hist(energy)
hist(instrumentalness)
hist(liveness)
hist(loudness)
hist(tempo)
hist(valence)
par(mfrow= c(2, 5))
# Send pairs() to png to resize and visualize better
# png(file = "distrib_contin_hist.png", width = 1200, height = 1000, pointsize=15)
title('Histogram of Attributes', line = -42, outer = TRUE)
hist(followers)
hist(acousticness)
hist(danceability)
hist(duration_ms)
hist(energy)
hist(instrumentalness)
hist(liveness)
hist(loudness)
hist(tempo)
hist(valence)
par(mfrow= c(2, 5))
# Send pairs() to png to resize and visualize better
# png(file = "distrib_contin_hist.png", width = 1200, height = 1000, pointsize=15)
title('Histogram of Attributes', line = 21, outer = TRUE)
hist(followers)
hist(acousticness)
hist(danceability)
hist(duration_ms)
hist(energy)
hist(instrumentalness)
hist(liveness)
hist(loudness)
hist(tempo)
hist(valence)
par(mfrow= c(2, 5))
# Send pairs() to png to resize and visualize better
# png(file = "distrib_contin_hist.png", width = 1200, height = 1000, pointsize=15)
title('Histogram of Attributes', side = 3, line = -2, outer = TRUE)
hist(followers)
hist(acousticness)
hist(danceability)
par(mfrow= c(2, 5))
# Send pairs() to png to resize and visualize better
# png(file = "distrib_contin_hist.png", width = 1200, height = 1000, pointsize=15)
hist(followers, title='Followers')
hist(acousticness, title='Acousticness')
hist(danceability, title='Danceability')
hist(duration_ms, title='Duration')
hist(energy, title='Energy')
hist(instrumentalness, title='Instrumentalness')
hist(liveness, title='Liveness')
hist(loudness, title='Loudness')
hist(tempo, title='Tempo')
hist(valence, title='Valence')
par(mfrow = c(1, 3))
par(mfrow= c(2, 5))
# Send pairs() to png to resize and visualize better
# png(file = "distrib_contin_hist.png", width = 1200, height = 1000, pointsize=15)
hist(followers, main='Followers')
hist(acousticness, main='Acousticness')
hist(danceability, main='Danceability')
hist(duration_ms, main='Duration')
hist(energy, main='Energy')
hist(instrumentalness, main='Instrumentalness')
hist(liveness, main='Liveness')
hist(loudness, main='Loudness')
hist(tempo, main='Tempo')
hist(valence, main='Valence')
par(mfrow = c(1, 3))
barplot(table(key), main = "Key distribution")
barplot(table(mode), main = "Mode")
barplot(table(time_signature), main = "Time signature")
par(mfrow= c(2, 5))
boxplot(danceability ~ training_set$IsWinner, ylab='Nominee Bool')
boxplot(followers ~ training_set$IsWinner)
par(mfrow= c(2, 5))
boxplot(danceability ~ training_set$IsWinner, xlab='Nominee Bool')
boxplot(followers ~ training_set$IsWinner)
par(mfrow= c(2, 5))
boxplot(danceability ~ training_set$IsWinner, xlab='Nominee Boolean')
boxplot(followers ~ training_set$IsWinner)
par(mfrow= c(2, 5))
boxplot(danceability ~ training_set$IsWinner, xlab='Nominee Boolean')
boxplot(followers ~ training_set$IsWinner, xlab='Nominee Boolean')
boxplot(acousticness ~ training_set$IsWinner, xlab='Nominee Boolean')
boxplot(duration_ms ~ training_set$IsWinner, xlab='Nominee Boolean')
boxplot(energy ~ training_set$IsWinner, xlab='Nominee Boolean')
boxplot(instrumentalness ~ training_set$IsWinner, xlab='Nominee Boolean')
boxplot(liveness ~ training_set$IsWinner, xlab='Nominee Boolean')
boxplot(loudness ~ training_set$IsWinner, xlab='Nominee Boolean')
boxplot(tempo ~ training_set$IsWinner, xlab='Nominee Boolean')
boxplot(valence ~ training_set$IsWinner, xlab='Nominee Boolean')
source("~/CMK/College/Padova/Spring 2023/Statistical Learning Mod B/Final Project/SL_Project/Project.r", echo=TRUE)
plot(test_over_error)
kmax = 100
test_error = numeric(kmax)
for (k in 1:kmax) {
knn_pred = as.factor(knn(training_norm_data[,-1], test_norm_data[,-1],
cl = training_norm_data$IsWinner_norm, k = k))
cm = confusionMatrix(data = knn_pred, reference = as.factor(test_norm_data$IsWinner_norm))
test_error[k] = 1 - cm$overall[1]
}
k_min = which.min(test_error)
k_min
knn = knn(training_norm_data[,-1], test_norm_data[,-1],
cl = training_norm_data$IsWinner_norm, k = k_min)
knn_pred_min = as.factor(knn)
table(test_norm_data$IsWinner_norm, knn)
test_over_error = numeric(kmax)
normalized_over_data = as.data.frame(lapply(oversampled_train_data[,c(-9, -12, -14)], min_max_norm))
traning_norm_data_over$IsWinner
training_norm_data_over$IsWinner
normalized_over_data$IsWinner
plot(normalized_over_data$IsWinner)
normalized_over_data$IsWinner
normalized_data_IsWinner
normalized_over_data$IsWinner
normalized_data$IsWinner
### Data Preprocessing
# Set the working directory to this file's folder
library("rstudioapi")
setwd(dirname(getActiveDocumentContext()$path))
load("final_df_n_str.RData")
Sys.setenv(LANG = "en")
#install.packages("correlation")
#install.packages("confintr")
#install.packages("ROSE")
#install.packages("caret")
#install.packages("glmnet")
library(pROC)
library(MASS)
library(ROSE)
library(confintr)
library(ggplot2)
library(correlation)
library(corrplot)
library(class)
library(caret)
library(glmnet)
# Selecting the relevant variables
data = final_df_n_str
data = data[,c("track_name", "artist_name", "IsWinner", "Year","year", "followers", "acousticness", "danceability", "duration_ms",
"energy", "instrumentalness", "key", "liveness", "loudness", "mode",
"tempo", "time_signature", "valence")]
# Merge the two year variable
data$Year[data$Year == "Undefined"] <- data$year[data$Year == "Undefined"]
data = data[,c("track_name","artist_name", "IsWinner", "Year", "followers", "acousticness", "danceability", "duration_ms",
"energy", "instrumentalness", "key", "liveness", "loudness", "mode",
"tempo", "time_signature", "valence")]
# Eliminating duplicates
data$track_name == "Closing Time"
data$track_name == "Smells Like Teen Spirit"
data$track_name == "Don't Wanna Fight"
data[914, ]
data[789,]
data[669,]
data = data[-c(669, 789, 914),]
sum(data$Year < 1992)
nrow(data)
data = data[!data$Year < 1992,]
# Creating row names
names = paste0(data$track_name, " - ", data$artist_name)
# Eliminating unusable variables
data = data[,c("IsWinner", "Year", "followers", "acousticness", "danceability", "duration_ms",
"energy", "instrumentalness", "key", "liveness", "loudness", "mode",
"tempo", "time_signature", "valence")]
data = cbind(names = names, data)
# Casting variables
data$IsWinner[data$IsWinner == "Winner"] = 1
data$IsWinner[data$IsWinner == "Nominee"] = 1
data$IsWinner[data$IsWinner == "Nothing"] = 0
data$IsWinner = as.integer(data$IsWinner)
data$Year = as.integer(data$Year)
data$mode = as.factor(data$mode)
data$key = as.factor(data$key)
data$time_signature = as.factor(data$time_signature)
summary(data)
# Checking balance between classes
length(data$IsWinner[data$IsWinner == 0]) / (length(data$IsWinner[data$IsWinner == 0]) + length(data$IsWinner[data$IsWinner == 1]))
length(data$IsWinner[data$IsWinner == 1]) / (length(data$IsWinner[data$IsWinner == 0]) + length(data$IsWinner[data$IsWinner == 1]))
# Splitting training and test set
training_size = floor(0.8 * nrow(data))
set.seed(42)
train_ind = sample(seq_len(nrow(data)), size = training_size)
training_set = data[train_ind,]
test_set = data[-train_ind,]
summary(training_set)
# Checking if the ratio is preserved
length(training_set$IsWinner[data$IsWinner == 0]) / (length(training_set$IsWinner[data$IsWinner == 0]) + length(training_set$IsWinner[data$IsWinner == 1]))
length(training_set$IsWinner[data$IsWinner == 1]) / (length(training_set$IsWinner[data$IsWinner == 0]) + length(training_set$IsWinner[data$IsWinner == 1]))
length(test_set$IsWinner[data$IsWinner == 0]) / (length(test_set$IsWinner[data$IsWinner == 0]) + length(test_set$IsWinner[data$IsWinner == 1]))
length(test_set$IsWinner[data$IsWinner == 1]) / (length(test_set$IsWinner[data$IsWinner == 0]) + length(test_set$IsWinner[data$IsWinner == 1]))
###############################################################################
# Exploratory Data Analysis
# Relationship between independent variables
attach(training_set)
# Correlations between continuous variables
cor_matrix = cor(training_set[,c(-1, -2, -10, -13, -15)])
# corrplot(cor_matrix, method='number')
# dev.new(width=10, height=5, unit="in")
png(file="corplot_indep_1.png",
width=1200, height=1000, pointsize = 26)
corrplot.mixed(cor_matrix, tl.pos='lt')
dev.off()
#pairs(training_set[,c(-1, -2, -10, -13, -15)], lower.panel = panel.smooth)
# Send pairs() to png to resize and visualize better
png(file = "corplot_indep_2.png", width = 1200, height = 1000, pointsize=20)
pairs(training_set[,c(-1, -2, -10, -13, -15)], lower.panel = panel.smooth)
dev.off()  # important!
# Association measure for categorical variables (Cramer's V is a normalized
# version of the chi-square statistics)
cramersv(matrix(c(as.numeric(key), as.numeric(mode)), ncol = 2))
cramersv(matrix(c(as.numeric(key), as.numeric(time_signature)), ncol = 2))
cramersv(matrix(c(as.numeric(mode), as.numeric(time_signature)), ncol = 2))
# Association between continuous and categorical variables
# Key
fol_key.aov <- aov(followers ~ key)
summary(fol_key.aov) # SIGNIFICANT
aco_key.aov <- aov(acousticness ~ key)
summary(aco_key.aov)
dan_key.aov <- aov(danceability ~ key)
summary(dan_key.aov) # SIGNIFICANT
dur_key.aov <- aov(duration_ms ~ key)
summary(dur_key.aov)
ene_key.aov <- aov(energy ~ key)
summary(ene_key.aov) # SIGNIFICANT
ins_key.aov <- aov(instrumentalness ~ key)
summary(ins_key.aov)
liv_key.aov <- aov(liveness ~ key)
summary(liv_key.aov)
loud_key.aov <- aov(loudness ~ key)
summary(loud_key.aov)
tem_key.aov <- aov(tempo ~ key)
summary(tem_key.aov)
val_key.aov <- aov(valence ~ key)
summary(val_key.aov)
# Mode
fol_mode.aov <- aov(followers ~ mode)
summary(fol_mode.aov) # SIGNIFICANT
aco_mode.aov <- aov(acousticness ~ mode)
summary(aco_mode.aov) # SIGNIFICANT
dan_mode.aov <- aov(danceability ~ mode)
summary(dan_mode.aov)
dur_mode.aov <- aov(duration_ms ~ mode)
summary(dur_mode.aov)
ene_mode.aov <- aov(energy ~ mode)
summary(ene_mode.aov) # SIGNIFICANT
ins_mode.aov <- aov(instrumentalness ~ mode)
summary(ins_mode.aov)
liv_mode.aov <- aov(liveness ~ mode)
summary(liv_mode.aov)
loud_mode.aov <- aov(loudness ~ mode)
summary(loud_mode.aov) # SIGNIFICANT
tem_mode.aov <- aov(tempo ~ mode)
summary(tem_mode.aov)
val_mode.aov <- aov(valence ~ mode)
summary(val_mode.aov)
# Time signature
fol_time.aov <- aov(followers ~ time_signature)
summary(fol_time.aov)
aco_time.aov <- aov(acousticness ~ time_signature)
summary(aco_time.aov) # SIGNIFICANT
dan_time.aov <- aov(danceability ~ time_signature)
summary(dan_time.aov) # SIGNIFICANT
dur_time.aov <- aov(duration_ms ~ time_signature)
summary(dur_time.aov) # SIGNIFICANT
ene_time.aov <- aov(energy ~ time_signature)
summary(ene_time.aov) # SIGNIFICANT
ins_time.aov <- aov(instrumentalness ~ time_signature)
summary(ins_time.aov) # SIGNIFICANT
liv_time.aov <- aov(liveness ~ time_signature)
summary(liv_time.aov)
loud_time.aov <- aov(loudness ~ time_signature)
summary(loud_time.aov) # SIGNIFICANT
tem_time.aov <- aov(tempo ~ time_signature)
summary(tem_time.aov) # SIGNIFICANT
val_time.aov <- aov(valence ~ time_signature)
summary(val_time.aov) # SIGNIFICANT
# Partial correlations
correlation(training_set[,c(-1, -2, -10, -13, -15)], partial = TRUE)
# Plots of variables with the largest partial correlation
ggplot(data = training_set, aes(danceability, valence)) + geom_jitter(color = "blue")
ggplot(data = training_set, aes(loudness, energy)) + geom_jitter(color = "blue")
ggplot(data = training_set, aes(acousticness, energy)) + geom_jitter(color = "blue")
#Weird song veeeeeeeeeeeeeeeeeeeeeeeery long
which.max(data$duration_ms)
data[504, ]
##############
# Checking distributions
par(mfrow= c(2, 5))
# Continuous variables
hist(followers, main='Followers')
hist(danceability, main='Danceability')
hist(duration_ms, main='Duration')
hist(energy, main='Energy')
hist(instrumentalness, main='Instrumentalness')
hist(liveness, main='Liveness')
hist(loudness, main='Loudness')
hist(tempo, main='Tempo')
hist(valence, main='Valence')
# Comparison IsWinner 0 vs 1 - Tempo
par(mfrow = c(1, 2))
x <- data[data$IsWinner == 0,]$tempo
hist(x)
abline(v = mean(x),                       # Add line for mean
col = "red",
lwd = 3)
text(x = mean(x) * 1.4,                   # Add text for mean
y = 150,
paste("Mean =", round(mean(x), digits=2)),
col = "red",
cex = 1)
x <- data[data$IsWinner == 1,]$tempo
hist(x)
abline(v = mean(x),                       # Add line for mean
col = "red",
lwd = 3)
text(x = mean(x) * 1.3,                   # Add text for mean
y = 18,
paste("Mean =", round(mean(x), digits=2)),
col = "red",
cex = 1)
# Comparison IsWinner 0 vs 1 - Valence
par(mfrow = c(1, 2))
x <- data[data$IsWinner == 0,]$valence
hist(x)
abline(v = mean(x),                       # Add line for mean
col = "red",
lwd = 3)
text(x = mean(x) * 0.5,                   # Add text for mean
y = 120,
paste("Mean =", round(mean(x), digits=2)),
col = "red",
cex = 1)
x <- data[data$IsWinner == 1,]$valence
hist(x)
abline(v = mean(x),                       # Add line for mean
col = "red",
lwd = 3)
text(x = mean(x) * 0.5,                   # Add text for mean
y = 30,
paste("Mean =", round(mean(x), digits=2)),
col = "red",
cex = 1)
# Categorical variables
par(mfrow = c(1, 3))
barplot(table(key), main = "Key distribution")
barplot(table(mode), main = "Mode")
barplot(table(time_signature), main = "Time signature")
# Comparison IsWinner 0 vs 1 - Key
par(mfrow = c(1, 2))
x <- data[data$IsWinner == 0,]$key
barplot(table(x), main = "Key: Non-Nominated")
x <- data[data$IsWinner == 1,]$key
barplot(table(x), main = "Key: Nominated/Winner")
# Relationships between dependent and independent variables
par(mfrow= c(2, 5))
boxplot(danceability ~ training_set$IsWinner, xlab='Nominee Boolean')
boxplot(followers ~ training_set$IsWinner)
source("~/CMK/College/Padova/Spring 2023/Statistical Learning Mod B/Final Project/SL_Project/Project.r", echo=TRUE)
