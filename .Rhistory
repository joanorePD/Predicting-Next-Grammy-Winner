return(list(artist_name = artist_name, genres = genres, followers = followers))
} else {
cat("Error in retrieving artist info:", http_status(response)$message, "\n")
return(NULL)
}
}
get_artist_top_tracks<- function(artist_id) {
access_token <- get_spotify_access_token()
track_df <- data.frame(matrix(ncol = 3, nrow = 0))
tracks <- list()
# Construct the API request URL
url <- paste0('https://api.spotify.com/v1/artists/', artist_id, '/top-tracks?market=US')
# Set up the API authorization header
token <- paste0("Bearer ", access_token)
# Send the API request
response <- httr::GET(url, add_headers(Authorization = token))
x <- c("IsWinner", "track_id", "artist_id")
colnames(track_df) <- x
if (http_status(response)$category == "Success") {
# Parse the JSON response
track_info <- jsonlite::fromJSON(httr::content(response, "text"))
# Extract relevant information from the response
for (track in track_info$tracks$id) {
track_df[nrow(track_df) + 1,] <- c('Nothing', track, artist_id)
}
return(track_df)
} else {
cat("Error in retrieving artist top tracks:", http_status(response)$message, "\n")
return(NULL)
}
}
get_total_info <- function(track_id, artist_id) {
cat("\014")
cat("Progress: ", 100*cont/5533, " %")
cont <<- cont + 1
if (cont %% 1000 == 0) {
idx <<- idx + 1
spotify_client_id <<- client_ids[idx]
spotify_client_secret <<- client_secrets[idx]
Sys.setenv(SPOTIFY_CLIENT_ID = spotify_client_id)
Sys.setenv(SPOTIFY_CLIENT_SECRET = spotify_client_secret)
}
return(c(get_track_name(track_id), get_artist_info(artist_id), get_audio_features(track_id)))
}
# Apply the get_track_name
final_df <- list_total_tracks %>%
rowwise() %>%
mutate(general = map2(track_id, artist_id, get_total_info))
client_ids <- c('57abed2d54534b1f95b70d674aedf5d8', '80f9fede3ffe465ea696f0d2c27ad5c5',
'ba70d73f54904db698438f2953815210', 'c4395de6a4e540e99bffd3d2f6be14f4',
'74a2687466954d4e92633e8f0f370cce', 'ebe882b66bc543b08550a5bf31bd59d0')
client_secrets <- c('8f6215f6c1f6413da48c04938cac0ab7', '2729fc14045d449c8f6489ae96f0472c',
'50e5fc54f7254501b43414092361626d', '0f71fdc18faa4a9f879a9a19277e7430',
'953a979b453d49c582a46ce3034f818b', 'b693aab3e9d44aa28565aa570cf7efad')
spotify_client_id <- client_ids[idx]
spotify_client_secret <- client_secrets[idx]
Sys.setenv(SPOTIFY_CLIENT_ID = spotify_client_id)
Sys.setenv(SPOTIFY_CLIENT_SECRET = spotify_client_secret)
# Apply the get_track_name
final_df <- list_total_tracks %>%
rowwise() %>%
mutate(general = map2(track_id, artist_id, get_total_info))
get_total_info <- function(track_id, artist_id) {
cat("\014")
cat("Progress: ", 100*cont/5533, " %")
cont <<- cont + 1
if (cont %% 1500 == 0) {
idx <<- idx + 1
spotify_client_id <<- client_ids[idx]
spotify_client_secret <<- client_secrets[idx]
Sys.setenv(SPOTIFY_CLIENT_ID = spotify_client_id)
Sys.setenv(SPOTIFY_CLIENT_SECRET = spotify_client_secret)
}
return(c(get_track_name(track_id), get_artist_info(artist_id), get_audio_features(track_id)))
}
# Apply the get_track_name
final_df <- list_total_tracks %>%
rowwise() %>%
mutate(general = map2(track_id, artist_id, get_total_info))
cont <- 1
idx <- 1
get_total_info <- function(track_id, artist_id) {
cat("\014")
cat("Progress: ", 100*cont/5533, " %")
cont <<- cont + 1
if (cont %% 1500 == 0) {
idx <<- idx + 1
spotify_client_id <<- client_ids[idx]
spotify_client_secret <<- client_secrets[idx]
Sys.setenv(SPOTIFY_CLIENT_ID = spotify_client_id)
Sys.setenv(SPOTIFY_CLIENT_SECRET = spotify_client_secret)
}
return(c(get_track_name(track_id), get_artist_info(artist_id), get_audio_features(track_id)))
}
# Apply the get_track_name
final_df <- list_total_tracks %>%
rowwise() %>%
mutate(general = map2(track_id, artist_id, get_total_info))
View(final_df_n)
View(final_df_n)
final_df_n <- final_df
# Unnest the 'track_info' column into separate columns
final_df_n <- final_df_n %>%
unnest_wider(general, names_sep=NULL)
View(final_df_n)
# Find columns with list elements
list_columns <- sapply(final_df_n, is.list)
# Print the column names with list elements
print(names(list_columns)[list_columns])
final_df_n$genres <- sapply(final_df_n$genres, toString)
final_df_n$artist_name <- sapply(final_df_n$artist_name, toString)
# Find columns with list elements
list_columns <- sapply(final_df_n, is.list)
# Print the column names with list elements
print(names(list_columns)[list_columns])
save(final_df_n, file = "final_df_n.RData")
# Save dataframe as a CSV file
write.csv(final_df_n, "final_df_n.csv")
final_df_n$artist_id <- sapply(final_df_n$artist_id, toString)
# Find columns with list elements
list_columns <- sapply(final_df_n, is.list)
# Print the column names with list elements
print(names(list_columns)[list_columns])
save(final_df_n, file = "final_df_n.RData")
# Save dataframe as a CSV file
write.csv(final_df_n, "final_df_n.csv")
load("final_df_n.RData")
# Group by all columns except 'salary'
grouped_df <- final_df_n %>% group_by_at(vars(-IsWinner))
# Summarize or perform other operations on grouped data
summarized_df <- grouped_df %>% summarise(IsWinner = max(IsWinner))
View(summarized_df)
View(final_df_n)
# Group by all columns except 'salary'
grouped_df <- final_df_n %>% group_by_at(vars(-IsWinner))
# Summarize or perform other operations on grouped data
summarized_df <- grouped_df %>% summarise(IsWinner = min(IsWinner))
mod <- replace(final_df_n$IsWinner, "Nothing", '3-Nothing')
mod <- replace(mod$IsWinner, "Nominee", '2-Nominee')
View(mod.out)
final_df_n$IsWinnerNumber <- ifelse(final_df_n$IsWinner == 'Nothing', 3, ifelse(final_df_n$IsWinner == 'Nominee', 2, 1))
# Group by all columns except 'salary'
grouped_df <- final_df_n %>% group_by_at(vars(-c(IsWinnerNumber,IsWinner)))
# Summarize or perform other operations on grouped data
summarized_df <- grouped_df %>% summarise(IsWinnerNumber = min(IsWinnerNumber))
summarized_df$IsWinner <- ifelse(summarized_df$IsWinnerNumber == 3, 'Nothing', ifelse(summarized_df$IsWinnerNumber == 2, 'Nominee', 'Winner'))
summarized_df <- summarized_df[summarized_df$year >= 2000]
summarized_df <- summarized_df[summarized_df$year >= 2000, ]
# Apply the get_track_name
summarized_df <- summarized_df %>%
rowwise() %>%
mutate(genre = map2(word_vector, genres, get_total_info))
# Apply the get_track_name
summarized_df <- summarized_df %>%
rowwise() %>%
mutate(genre = map2(global_var = word_vector, genres, get_total_info))
# Apply the get_track_name
summarized_df <- summarized_df %>%
rowwise() %>%
mutate(genre = map2(word_vector = word_vector, genres, get_total_info))
# Apply the get_track_name
summarized_df <- summarized_df %>%
rowwise() %>%
mutate(genre = map2(vector = word_vector, genres, get_total_info))
# Apply the get_track_name
summarized_df <- summarized_df %>%
rowwise() %>%
mutate(genre = map2(vector = word_vector, genres, findMatchingWord))
# Function to check if string contains a word from the vector and return the matching word
findMatchingWord <- function(word_vector, input_string) {
pattern <- paste(word_vector, collapse = "|")
matches <- regmatches(input_string, regexpr(pattern, input_string))
if (length(matches) > 0) {
return(matches)
} else {
return(NULL)
}
}
# Apply the get_track_name
summarized_df <- summarized_df %>%
rowwise() %>%
mutate(genre = map2(vector = word_vector, genres, findMatchingWord))
# Apply the get_track_name
summarized_df <- summarized_df %>%
rowwise() %>%
mutate(genre = map2c("soul", "hip hop", "pop", "rock", "blues",
"rap", "jazz", "metal", "funk", "country",
"r&b", "folk", "indie", "house", "electro",
"disco", 'reggaeton', 'trap', 'latino',
'edm', 'adult standards'), genres, findMatchingWord))
# Apply the get_track_name
summarized_df <- summarized_df %>%
rowwise() %>%
mutate(genre = map2c("soul", "hip hop", "pop", "rock", "blues",
"rap", "jazz", "metal", "funk", "country",
"r&b", "folk", "indie", "house", "electro",
"disco", 'reggaeton', 'trap', 'latino',
'edm', 'adult standards'), genres, findMatchingWord)
# Apply the get_track_name
summarized_df <- summarized_df %>%
rowwise() %>%
mutate(genre = map2("soul", "hip hop", "pop", "rock", "blues",
"rap", "jazz", "metal", "funk", "country",
"r&b", "folk", "indie", "house", "electro",
"disco", 'reggaeton', 'trap', 'latino',
'edm', 'adult standards'), genres, findMatchingWord)
# Apply the get_track_name
summarized_df <- summarized_df %>%
rowwise() %>%
mutate(genre = map2(c("soul", "hip hop", "pop", "rock", "blues",
"rap", "jazz", "metal", "funk", "country",
"r&b", "folk", "indie", "house", "electro",
"disco", 'reggaeton', 'trap', 'latino',
'edm', 'adult standards'), genres, findMatchingWord))
# Apply the get_track_name
summarized_df <- summarized_df %>%
rowwise() %>%
mutate(genre = list(map2(c("soul", "hip hop", "pop", "rock", "blues",
"rap", "jazz", "metal", "funk", "country",
"r&b", "folk", "indie", "house", "electro",
"disco", 'reggaeton', 'trap', 'latino',
'edm', 'adult standards'), genres, findMatchingWord)))
View(summarized_df)
View(summarized_df[[22]][[1]])
# Group by all columns except 'salary'
grouped_df <- final_df_n %>% group_by_at(vars(-c(IsWinnerNumber,IsWinner)))
# Summarize or perform other operations on grouped data
summarized_df <- grouped_df %>% summarise(IsWinnerNumber = min(IsWinnerNumber))
summarized_df$IsWinner <- ifelse(summarized_df$IsWinnerNumber == 3, 'Nothing', ifelse(summarized_df$IsWinnerNumber == 2, 'Nominee', 'Winner'))
summarized_df <- summarized_df[summarized_df$year >= 2000, ]
# Function to check if string contains a word from the vector and return the matching word
findMatchingWord <- function(word_vector, input_string) {
pattern <- paste(word_vector, collapse = "|")
matches <- regmatches(input_string, regexpr(pattern, input_string))
if (length(matches) > 0) {
return(na.omit(matches)[1])
} else {
return(NULL)
}
}
# Apply the get_track_name
summarized_df_genre <- summarized_df %>%
rowwise() %>%
mutate(genre = list(map2(c("soul", "hip hop", "pop", "rock", "blues",
"rap", "jazz", "metal", "funk", "country",
"r&b", "folk", "indie", "house", "electro",
"disco", 'reggaeton', 'trap', 'latino',
'edm', 'adult standards'), genres, findMatchingWord)))
View(summarized_df_genre)
# Function to check if string contains a word from the vector and return the matching word
findMatchingWord <- function(word_vector, input_string) {
pattern <- paste(word_vector, collapse = "|")
matches <- regmatches(input_string, regexpr(pattern, input_string))
if (length(matches) > 0) {
return(na.omit(matches)[1])
} else {
return(NULL)
}
}
# Apply the get_track_name
summarized_df_genre <- summarized_df %>%
rowwise() %>%
mutate(genre = list(map2(c("soul", "hip hop", "pop", "rock", "blues",
"rap", "jazz", "metal", "funk", "country",
"r&b", "folk", "indie", "house", "electro",
"disco", 'reggaeton', 'trap', 'latino',
'edm', 'adult standards'), genres, findMatchingWord)))
View(summarized_df_genre)
# Function to check if string contains a word from the vector and return the matching word
findMatchingWord <- function(word_vector, input_string) {
pattern <- paste(word_vector, collapse = "|")
matches <- regmatches(input_string, regexpr(pattern, input_string))
if (length(matches) > 0) {
return(na.omit(matches)[1])
} else {
return(NULL)
}
}
# Apply the get_track_name
summarized_df_genre <- summarized_df %>%
rowwise() %>%
mutate(genre = map2(c("soul", "hip hop", "pop", "rock", "blues",
"rap", "jazz", "metal", "funk", "country",
"r&b", "folk", "indie", "house", "electro",
"disco", 'reggaeton', 'trap', 'latino',
'edm', 'adult standards'), genres, findMatchingWord))
View(summarized_df_genre)
View(summarized_df_genre[[22]][[148]])
# Apply the get_track_name
summarized_df_genre <- summarized_df_genre %>%
rowwise() %>%
mutate(genre = map(genre, na.omit()))
mutate(genre = map(genre, na.omit)
# Apply the get_track_name
summarized_df_genre <- summarized_df_genre %>%
# Apply the get_track_name
summarized_df_genre <- summarized_df_genre %>%
rowwise() %>%
mutate(genre = map(genre, na.omit))
# Apply the get_track_name
summarized_df_genre <- summarized_df_genre %>%
rowwise() %>%
mutate(genre = list(map(genre, na.omit)))
# Unnest the 'track_info' column into separate columns
summarized_df_genre <- summarized_df_genre %>%
unnest_wider(genre, names_sep=NULL)
# Sort genre frequencies in descending order and take top 10
top_10_genres <- head(sort(genre_counts, decreasing = TRUE), 10)
# Unnest the 'track_info' column into separate columns
summarized_df_genre <- summarized_df_genre %>%
unnest_wider(genre, names_sep=NULL)
# Unnest the 'track_info' column into separate columns
summarized_df_genre <- summarized_df_genre %>%
unnest_wider(genre, names_sep=NULL)
# Function to check if string contains a word from the vector and return the matching word
findMatchingWord <- function(word_vector, input_string) {
pattern <- paste(word_vector, collapse = "|")
matches <- regmatches(input_string, regexpr(pattern, input_string))
if (length(matches) > 0) {
return(na.omit(matches)[1])
} else {
return(NULL)
}
}
# Apply the get_track_name
summarized_df_genre <- summarized_df %>%
rowwise() %>%
mutate(genre = list(map2(c("soul", "hip hop", "pop", "rock", "blues",
"rap", "jazz", "metal", "funk", "country",
"r&b", "folk", "indie", "house", "electro",
"disco", 'reggaeton', 'trap', 'latino',
'edm', 'adult standards'), genres, findMatchingWord)))
# Function to check if string contains a word from the vector and return the matching word
findMatchingWord <- function(word_vector, input_string) {
pattern <- paste(word_vector, collapse = "|")
matches <- regmatches(input_string, regexpr(pattern, input_string))
if (length(matches) > 0) {
return(na.omit(matches)[1])
}
}
# Apply the get_track_name
summarized_df_genre <- summarized_df %>%
rowwise() %>%
mutate(genre = list(map2(c("soul", "hip hop", "pop", "rock", "blues",
"rap", "jazz", "metal", "funk", "country",
"r&b", "folk", "indie", "house", "electro",
"disco", 'reggaeton', 'trap', 'latino',
'edm', 'adult standards'), genres, findMatchingWord)))
View(summarized_df_genre)
summarized_df_genre <- summarized_df %>%
rowwise() %>%
mutate(genre = findMatchingWord(c("soul", "hip hop", "pop", "rock", "blues",
"rap", "jazz", "metal", "funk", "country",
"r&b", "folk", "indie", "house", "electro",
"disco", 'reggaeton', 'trap', 'latino',
'edm', 'adult standards'), genres))
# Function to check if string contains a word from the vector and return the matching word
findMatchingWord <- function(word_vector, input_string) {
pattern <- paste(word_vector, collapse = "|")
matches <- regmatches(input_string, regexpr(pattern, input_string))
if (length(matches) > 0) {
return(na.omit(matches)[[1]])
}
}
summarized_df_genre <- summarized_df %>%
rowwise() %>%
mutate(genre = findMatchingWord(c("soul", "hip hop", "pop", "rock", "blues",
"rap", "jazz", "metal", "funk", "country",
"r&b", "folk", "indie", "house", "electro",
"disco", 'reggaeton', 'trap', 'latino',
'edm', 'adult standards'), genres))
summarized_df_genre <- summarized_df %>%
rowwise() %>%
mutate(genre = findMatchingWord(c("soul", "hip hop", "pop", "rock", "blues",
"rap", "jazz", "metal", "funk", "country",
"r&b", "folk", "indie", "house", "electro",
"disco", 'reggaeton', 'trap', 'latino',
'edm', 'adult standards'), genres))
# Apply the get_track_name
summarized_df_genre <- summarized_df %>%
rowwise() %>%
mutate(genre = list(map2(c("soul", "hip hop", "pop", "rock", "blues",
"rap", "jazz", "metal", "funk", "country",
"r&b", "folk", "indie", "house", "electro",
"disco", 'reggaeton', 'trap', 'latino',
'edm', 'adult standards'), genres, findMatchingWord)))
View(summarized_df_genre)
summarized_df_genre <- summarized_df %>%
rowwise() %>%
mutate(genre = findMatchingWord(c("soul", "hip hop", "pop", "rock", "blues",
"rap", "jazz", "metal", "funk", "country",
"r&b", "folk", "indie", "house", "electro",
"disco", 'reggaeton', 'trap', 'latino',
'edm', 'adult standards'), genres))
# Function to check if string contains a word from the vector and return the matching word
findMatchingWord <- function(word_vector, input_string) {
pattern <- paste(word_vector, collapse = "|")
matches <- regmatches(input_string, regexpr(pattern, input_string))
if (length(matches) > 0) {
return(na.omit(matches)[[1]])
} else {
return("")  # Return an empty string if no match found
}
}
# Apply the get_track_name
summarized_df_genre <- summarized_df %>%
rowwise() %>%
mutate(genre = list(map2(c("soul", "hip hop", "pop", "rock", "blues",
"rap", "jazz", "metal", "funk", "country",
"r&b", "folk", "indie", "house", "electro",
"disco", 'reggaeton', 'trap', 'latino',
'edm', 'adult standards'), genres, findMatchingWord)))
View(summarized_df_genre)
# Function to check if string contains a word from the vector and return the matching word
findMatchingWord <- function(word_vector, input_string) {
pattern <- paste(word_vector, collapse = "|")
matches <- regmatches(input_string, regexpr(pattern, input_string))
if (length(matches) > 0) {
return(na.omit(matches)[[1]])
} else {
return("")  # Return an empty string if no match found
}
}
summarized_df_genre <- summarized_df %>%
rowwise() %>%
mutate(genre = findMatchingWord(c("soul", "hip hop", "pop", "rock", "blues",
"rap", "jazz", "metal", "funk", "country",
"r&b", "folk", "indie", "house", "electro",
"disco", 'reggaeton', 'trap', 'latino',
'edm', 'adult standards'), genres))
View(summarized_df_genre)
# Count the occurrences of each genre
genre_counts <- table(summarized_df_genre$genre)
# Get the top 10 genres
top_10_genres <- head(sort(genre_counts, decreasing = TRUE), 10)
# Create a bar plot of the top 10 genres
barplot(top_10_genres, main = "Top 10 Genres", xlab = "Genre", ylab = "Count")
# Count the occurrences of each genre
genre_counts <- table(na.omit(summarized_df_genre$genre))
# Get the top 10 genres
top_10_genres <- head(sort(genre_counts, decreasing = TRUE), 10)
# Create a bar plot of the top 10 genres
barplot(top_10_genres, main = "Top 10 Genres", xlab = "Genre", ylab = "Count")
# Plot bar chart
barplot(top_10_genres, main = "Top 10 Genres", xlab = "Genres", ylab = "Count", las = 2)
# Summarize or perform other operations on grouped data
summarized_df <- grouped_df %>% summarise(IsWinnerNumber = min(IsWinnerNumber))
summarized_df$IsWinner <- ifelse(summarized_df$IsWinnerNumber == 3, 'Nothing', ifelse(summarized_df$IsWinnerNumber == 2, 'Nominee', 'Winner'))
# Function to check if string contains a word from the vector and return the matching word
findMatchingWord <- function(word_vector, input_string) {
pattern <- paste(word_vector, collapse = "|")
matches <- regmatches(input_string, regexpr(pattern, input_string))
if (length(matches) > 0) {
return(na.omit(matches)[[1]])
} else {
return("")  # Return an empty string if no match found
}
}
# Apply the get_track_name
summarized_df_genre <- summarized_df %>%
rowwise() %>%
mutate(genre = list(map2(c("soul", "hip hop", "pop", "rock", "blues",
"rap", "jazz", "metal", "funk", "country",
"r&b", "folk", "indie", "house", "electro",
"disco", 'reggaeton', 'trap', 'latino',
'edm', 'adult standards'), genres, findMatchingWord)))
summarized_df_genre <- summarized_df %>%
rowwise() %>%
mutate(genre = findMatchingWord(c("soul", "hip hop", "pop", "rock", "blues",
"rap", "jazz", "metal", "funk", "country",
"r&b", "folk", "indie", "house", "electro",
"disco", 'reggaeton', 'trap', 'latino',
'edm', 'adult standards'), genres))
# Count the occurrences of each genre
genre_counts <- table(na.omit(summarized_df_genre$genre))
# Get the top 10 genres
top_10_genres <- head(sort(genre_counts, decreasing = TRUE), 10)
# Create a bar plot of the top 10 genres
barplot(top_10_genres, main = "Top 10 Genres", xlab = "Genre", ylab = "Count")
# Count the occurrences of each artist
artist_counts <- table(summarized_df_genre$artist_name)
# Get the top 10 genres
top_10_artists <- head(sort(artist_counts, decreasing = TRUE), 10)
# Plot bar chart
barplot(top_10_genres, main = "Top 10 Artists", xlab = "Artists", ylab = "Count", las = 2)
# Count the occurrences of each artist
artist_counts <- table(summarized_df_genre$artist_name)
# Get the top 10 genres
top_10_artists <- head(sort(artist_counts, decreasing = TRUE), 10)
# Plot bar chart
barplot(top_10_artists, main = "Top 10 Artists", xlab = "Artists", ylab = "Count", las = 2)
# Count the occurrences of each artist
artist_counts <- table(summarized_df_genre$artist_name[summarized_df_genre$IsWinner == 'Winner'])
# Get the top 10 genres
top_10_artists <- head(sort(artist_counts, decreasing = TRUE), 10)
# Plot bar chart
barplot(top_10_artists, main = "Top 10 Artists", xlab = "Artists", ylab = "Count", las = 2)
# Count the occurrences of each artist
artist_counts <- table(summarized_df_genre$artist_name[summarized_df_genre$IsWinner == 'Nominee'])
# Get the top 10 genres
top_10_artists <- head(sort(artist_counts, decreasing = TRUE), 10)
# Plot bar chart
barplot(top_10_artists, main = "Top 10 Artists", xlab = "Artists", ylab = "Count", las = 2)
# Count the occurrences of each artist
artist_counts <- table(summarized_df_genre$artist_name[summarized_df_genre$IsWinner == 'Nominee' | summarized_df_genre$IsWinner == 'Winner'])
# Get the top 10 genres
top_10_artists <- head(sort(artist_counts, decreasing = TRUE), 10)
# Plot bar chart
barplot(top_10_artists, main = "Top 10 Artists", xlab = "Artists", ylab = "Count", las = 2)
View(final_df_n)
View(grammy)
View(grammyspoti)
