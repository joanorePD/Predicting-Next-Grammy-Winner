summary(tem_time.aov) # SIGNIFICANT
val_time.aov <- aov(valence ~ time_signature)
summary(val_time.aov) # SIGNIFICANT
# Partial correlations
correlation(training_set[,c(-1, -2, -10, -13, -15)], partial = TRUE)
# Plots of variables with the largest partial correlation
ggplot(data = training_set, aes(danceability, valence)) + geom_jitter(color = "blue")
ggplot(data = training_set, aes(loudness, energy)) + geom_jitter(color = "blue")
ggplot(data = training_set, aes(acousticness, energy)) + geom_jitter(color = "blue")
#Weird song veeeeeeeeeeeeeeeeeeeeeeeery long
which.max(data$duration_ms)
data[504, ]
##############
# Checking distributions
par(mfrow= c(2, 5))
# Continuous variables
hist(followers)
hist(acousticness)
hist(danceability)
hist(duration_ms)
hist(energy)
hist(instrumentalness)
hist(liveness)
hist(loudness)
hist(tempo)
hist(valence)
# Categorical variables
par(mfrow = c(1, 3))
barplot(table(key), main = "Key distribution")
barplot(table(mode), main = "Mode")
barplot(table(time_signature), main = "Time signature")
# Relationships between dependent and independent variables
par(mfrow= c(2, 5))
boxplot(danceability ~ IsWinner)
boxplot(followers ~ IsWinner)
boxplot(acousticness ~ IsWinner)
boxplot(duration_ms ~ IsWinner)
boxplot(energy ~ IsWinner)
boxplot(instrumentalness ~ IsWinner)
boxplot(liveness ~ IsWinner)
boxplot(loudness ~ IsWinner)
boxplot(tempo ~ IsWinner)
boxplot(valence ~ IsWinner)
par(mfrow = c(1, 1))
chisq.test(key, IsWinner)
chisq.test(mode, IsWinner)
chisq.test(time_signature, IsWinner)
cramersv(matrix(c(as.numeric(key), as.numeric(IsWinner)), ncol = 2))
cramersv(matrix(c(as.numeric(mode), as.numeric(IsWinner)), ncol = 2))
cramersv(matrix(c(as.numeric(time_signature), as.numeric(IsWinner)), ncol = 2))
table(mode, IsWinner)
table(time_signature, IsWinner)
###############################################################################
### Model fitting
library(MASS)
logistic = glm(IsWinner ~ ., data = training_set[,c(-1,-2)], family = "binomial")
summary(logistic)
help(step)
n = dim(training_set)[1]
logistic_backward = step(logistic, direction = "backward", k = log(n), trace = 1)
logistic_forward = step(logistic, direction = "forward", k = log(n), trace = 1)
log_back = stepAIC(logistic, direction = "backward")
log_for = stepAIC(logistic, direction = "forward")
log_both =  stepAIC(logistic, direction = "both")
logistic_reduced = glm(IsWinner ~ danceability + loudness + followers + valence + duration_ms + acousticness, data = training_set,  family = "binomial")
summary(logistic_reduced)
help(prredict)
help(predict)
test_set
test_set[2]
predict(logistic_reduced, newdata = test_set[2])
predict(logistic_reduced, newdata = test_set)
predictions =predict(logistic_reduced, newdata = test_set)
test_set
predictions =predict(logistic_reduced, newdata = test_set[,c(-1, -2)])
accuracy = sum(predictions == test_set[2]) / lenght(test_set[2])
accuracy = sum(predictions == test_set[2]) / length(test_set[2])
accuracy
test_set[2]
predictions
predictions
IsWinner
summary(logistic_reduced)
View(logistic_reduced)
predictions = predict(logistic_reduced, newdata = test_set[,c(-1, -2)], type = "response")
predictions
library(ROSE)
install.packages("ROSE")
library(ROSE)
install.packages("smotefamily")
library(smotefamily)
oversampled_data = SMOTE(training_set[2] ~., training_set[-1], perc.over = 200, k = 5)
oversampled_data
oversampled_data = SMOTE(training_set[2] ~., training_set[-1], perc.over = 200, k = 5)
help(SMOTE)
oversampled_data = SMOTE(training_set[2] ~., training_set[-1], k = 5, dup_size = 2)
oversampled_data = SMOTE(training_set[-1], training_set[2], k = 5, dup_size = 2)
training_set[-1]
training_set
oversampled_data = SMOTE(training_set[-1], training_set[2], k = 5, dup_size = 2)
oversampled_data = SMOTE(training_set[-1], training_set[2],  K= 5, dup_size = 2)
as.numeric(IsWinner)
IsWinner = as.numeric(IsWinner)
oversampled_data = SMOTE(training_set[-1], training_set[2],  K= 5, dup_size = 2)
summary(data)
key = as.numeric(key)
mode = as.numeric(mode)
time_signature = as.numeric(time_signature)
oversampled_data = SMOTE(training_set[-1], training_set[2],  K= 5, dup_size = 2)
summary(data)
summary(training_set)
oversampled_data = SMOTE(training_set[-1], training_set[2],  K= 5, dup_size = 2)
help("ovun.sample")
oversampled_train_data = ovun.sample(IsWinner ~., data = training_set[-1], method = "over", p = 0.5, seed = 42)
oversampled_train_data
dim(oversampled_data)
dim(oversampled_train_data)
str(oversampled_train_data)
oversampled_train_data
dim(training_set)
dim(oversampled_train_data)
oversampled_train_data$data
dim(oversampled_train_data$data)
length(oversampled_train_data$data$IsWinner == 0)
length(oversampled_train_data$data$IsWinner == 1)
oversampled_train_data$data$IsWinner
sum(oversampled_train_data$data$IsWinner)
sum(oversampled_train_data$data$IsWinner == 0)
sum(oversampled_train_data$data$IsWinner == 1)
sum(training_set$IsWinner == 0)
sum(training_set$IsWinner == 1)
oversampled_train_data
logistic_over = glm(oversampled_train_data[1] ~ ., data = oversampled_train_data[-1], family = "binomial")
logistic_over = glm(oversampled_train_data[1] ~ ., data = oversampled_train_data[-1], family = "binomial")
oversampled_train_data[-1]
oversampled_train_dat
oversampled_train_data
oversampled_train_data[, -1]
logistic_over = glm(oversampled_train_data[1] ~ ., data = oversampled_train_data[, c(-1)], family = "binomial")
oversampled_train_data[, c(-1)]
oversampled_train_data = ovun.sample(IsWinner ~., data = training_set[-1], method = "over", p = 0.5, seed = 42)$data
sum(oversampled_train_data$IsWinner == 0)
sum(oversampled_train_data$IsWinner == 1)
logistic_over = glm(oversampled_train_data[1] ~ ., data = oversampled_train_data[-1], family = "binomial")
oversampled_train_data[1]
logistic_over = glm(as.factor(oversampled_train_data[1]) ~ ., data = oversampled_train_data[-1], family = "binomial")
length(as.factor(oversampled_train_data[1]))
length(as.numeric(oversampled_train_data[1]))
length(as.integer(oversampled_train_data[1]))
help(glm)
str(IsWinner)
as.numeric(as.factor(oversampled_train_data[1]))
as.factor(oversampled_train_data[1])
oversampled_train_data[1]
as.numeric(as.factor(as.vector(oversampled_train_data[1])))
as.vector(oversampled_train_data[1])
as.factor(as.vector(oversampled_train_data[1]))
logistic_over = glm(as.vector(oversampled_train_data[1]) ~ ., data = oversampled_train_data[-1], family = "binomial")
as.numeric(as.vector(oversampled_train_data[1]))
as.numeric(unlist(oversampled_train_data[1]))
logistic_over = glm(as.numeric(unlist(oversampled_train_data[1])) ~ ., data = oversampled_train_data[-1], family = "binomial")
summary(logistic_over)
log_over_back = stepAIC(logistic_over, direction = "backward")
log_over_for = stepAIC(logistic_over, direction = "forward")
log_over_both =  stepAIC(logistic_over, direction = "both")
oversampled_train_data[, c("instrumentalness")]
logistic_reduced_over = glm(as.numeric(unlist(oversampled_train_data[1])) ~ oversampled_train_data[,
c("instrumentalness", "followers", "Year", "loudness", "key",
"time_signature", "valence", "acousticness", "duration_ms")])
logistic_reduced_over = glm(as.numeric(unlist(oversampled_train_data[1])) ~ unlist(oversampled_train_data[,
c("instrumentalness", "followers", "Year", "loudness", "key",
"time_signature", "valence", "acousticness", "duration_ms")]))
logistic_reduced_over = glm(as.numeric(unlist(oversampled_train_data[1])) ~ as.matrix(unlist(oversampled_train_data[,
c("instrumentalness", "followers", "Year", "loudness", "key",
"time_signature", "valence", "acousticness", "duration_ms")])))
logistic_reduced_over = glm(as.numeric(unlist(oversampled_train_data[1])) ~ oversampled_train_data[,
c("instrumentalness", "followers", "Year", "loudness", "key",
"time_signature", "valence", "acousticness", "duration_ms")])
str(oversampled_train_data[, c("instrumentalness", "followers", "Year", "loudness", "key",
"time_signature", "valence", "acousticness", "duration_ms")])
logistic_reduced_over = glm(as.numeric(unlist(oversampled_train_data[1])) ~ oversampled_train_data[,
c("instrumentalness", "followers", "Year", "loudness", "key",
"time_signature", "valence", "acousticness", "duration_ms")])
reduced_dataset = oversampled_train_data[, c("instrumentalness", "followers", "Year", "loudness", "key", "time_signature", "valence", "acousticness", "duration_ms")]
attach(oversampled_train_data)
logistic_reduced_over = glm(as.numeric(unlist(oversampled_train_data[1])) ~
oversampled_train_data$instrumentalness +
oversampled_train_data$followers +
oversampled_train_data$Year +
oversampled_train_data$loudness +
oversampled_train_data$key +
oversampled_train_data$time_signature +
oversampled_train_data$valence +
oversampled_train_data$acousticness +
oversampled_train_data$duration_ms, family = "binomial")
logistic_reduced_over
accuracy = sum(predictions == test_set[2]) / length(test_set[2])
accuracy
predictions = ifelse(predictions > 0.3, 1, 0)
accuracy = sum(predictions == test_set[2]) / length(test_set[2])
accuracy
sum(predictions == test_set[2])
length(test_set[2])
test_set[2]
dim(test_set[2])
dim(test_set[2])[1]
accuracy = sum(predictions == test_set[2]) / dim(test_set[2])[1]
accuracy
predictions_04 = ifelse(predictions > 0.4, 1, 0)
accuracy_04 = sum(predictions == test_set[2]) / dim(test_set[2])[1]
predictions_03 = ifelse(predictions > 0.3, 1, 0)
accuracy_03 = sum(predictions_03 == test_set[2]) / dim(test_set[2])[1]
accuracy_03
predictions_04 = ifelse(predictions > 0.4, 1, 0)
accuracy_04 = sum(predictions_04 == test_set[2]) / dim(test_set[2])[1]
accuracy_04
predictions = predict(logistic_reduced, newdata = test_set[,c(-1, -2)], type = "response")
predictions_03 = ifelse(predictions > 0.3, 1, 0)
accuracy_03 = sum(predictions_03 == test_set[2]) / dim(test_set[2])[1]
predictions_04 = ifelse(predictions > 0.4, 1, 0)
accuracy_04 = sum(predictions_04 == test_set[2]) / dim(test_set[2])[1]
accuracy_03
accuracy_04
predictions_05 = ifelse(predictions > 0.5, 1, 0)
accuracy_05 = sum(predictions_05 == test_set[2]) / dim(test_set[2])[1]
accuracy_05
predictions_06 = ifelse(predictions > 0.6, 1, 0)
accuracy_06 = sum(predictions_06 == test_set[2]) / dim(test_set[2])[1]
accuracy_06
predictions = predict(logistic_reduced, newdata = test_set[,c(-1, -2)], type = "response")
predictions_04 = ifelse(predictions > 0.4, 1, 0)
accuracy_04 = sum(predictions_04 == test_set[2]) / dim(test_set[2])[1]
predictions_05 = ifelse(predictions > 0.5, 1, 0)
accuracy_05 = sum(predictions_05 == test_set[2]) / dim(test_set[2])[1]
predictions_06 = ifelse(predictions > 0.6, 1, 0)
accuracy_04
accuracy_05
accuracy_06
predictions_oversample = predict(logistic_reduced_over, newdata = test_set[,c(-1, -2)], type = "response")
test_set
test_set[,c(-1, -2)]
predictions = predict(logistic_reduced, newdata = test_set[,c(-1, -2)], type = "response")
predictions_oversample
test_set[,c(-1, -2)]
predictions = predict(logistic_reduced, newdata = test_set[,c(-1, -2)], type = "response")
predictions
predictions_oversample = predict(logistic_reduced_over, newdata = test_set[,c(-1, -2)], type = "response")
predictions_oversample
predictions_oversample = predict(logistic_reduced_over, newdata = test_set[,c(-1, -2)], type = "response")
logistic_reduced_over
predictions_oversample = predict(logistic_reduced_over, newdata = test_set[,c(-1, -2)], type = "response")
predictions_oversample = predict(logistic, newdata = test_set[,c(-1, -2)], type = "response")
logistic_reduced_over = glm(as.numeric(unlist(oversampled_train_data[1])) ~
oversampled_train_data$instrumentalness +
oversampled_train_data$followers +
oversampled_train_data$Year +
oversampled_train_data$loudness +
oversampled_train_data$key +
oversampled_train_data$time_signature +
oversampled_train_data$valence +
oversampled_train_data$acousticness +
oversampled_train_data$duration_ms, family = "binomial")
predictions_oversample = predict(logistic_reduced_over, newdata = test_set[,c(-1, -2)], type = "response")
test_set[,c(-1, -2)]
response_variable_over = as.numeric(unlist(oversampled_train_data[1]))
reduced_variables_over = c(
"oversampled_train_data$instrumentalness",
"oversampled_train_data$followers",
"oversampled_train_data$Year",
"oversampled_train_data$loudness",
"oversampled_train_data$key",
"oversampled_train_data$time_signature",
"oversampled_train_data$valence",
"oversampled_train_data$acousticness",
"oversampled_train_data$duration_ms")
logistic_reduced_over = glm(response_variable_over ~ reduced_variables_over, family = "binomial")
reduced_variables_over
reduced_variables_over = oversampled_train_data[,c(
"oversampled_train_data$instrumentalness",
"oversampled_train_data$followers",
"oversampled_train_data$Year",
"oversampled_train_data$loudness",
"oversampled_train_data$key",
"oversampled_train_data$time_signature",
"oversampled_train_data$valence",
"oversampled_train_data$acousticness",
"oversampled_train_data$duration_ms")]
reduced_variables_over
oversampled_train_data
oversampled_train_data[, c(1, 2)]
oversampled_train_data[, "oversampled_train_data$instrumentalness"]
oversampled_train_data[, oversampled_train_data$instrumentalness]
head(oversampled_train_data)
reduced_variables_over = oversampled_train_data[,c(2, 3, 4, 6, 8, 9, 11, 14, 15)]
head(reduced_variables_over)
response_variable_over
logistic_reduced_over = glm(response_variable_over ~ reduced_variables_over, family = "binomial")
reduced_variables_over = unlist(oversampled_train_data[,c(2, 3, 4, 6, 8, 9, 11, 14, 15)])
reduced_variables_over
reduced_variables_over = as.matrix(unlist(oversampled_train_data[,c(2, 3, 4, 6, 8, 9, 11, 14, 15)]))
reduced_variables_over
str(oversampled_train_data[,c(2, 3, 4, 6, 8, 9, 11, 14, 15)])
reduced_variables_over = as.matrix(oversampled_train_data[,c(2, 3, 4, 6, 8, 9, 11, 14, 15)])
reduced_variables_over
reduced_variables_over$Year
reduced_variables_over[1]
str(reduced_variables_over)
reduced_variables_over = oversampled_train_data[,c(2, 3, 4, 6, 8, 9, 11, 14, 15)]
reduced_variables_over$Year
str(reduced_variables_over)
dim(reduced_variables_over)
logistic_reduced_over = glm(response_variable_over ~ reduced_variables_over, family = "binomial")
dim(reduced_variables_over)
is.li(reduced_variables_over)
is.list(reduced_variables_over)
unlist(reduced_variables_over)
unlist(reduced_variables_over[1])
reduced_variables_over = oversampled_train_data[,c(2, 3, 4, 6, 8, 9, 11, 14, 15)]
unlist(reduced_variables_over[1])
reduced_variables_over = unlist(cbind(reduced_variables_over[1], reduced_variables_over[2]))
reduced_variables_over
reduced_variables_over = as.matrix(oversampled_train_data[,c(2, 3, 4, 6, 8, 9, 11, 14, 15)], ncol = 9)
reduced_variables_over
reduced_variables_over$Year
reduced_variables_over
head(reduced_variables_over[1])
head(reduced_variables_over[,1])
reduced_variables_over[,1]
as.numeric(reduced_variables_over[,1])
head(reduced_variables_over[,2])
head(reduced_variables_over[,3])
head(reduced_variables_over[,4])
summary(oversampled_train_data)
as.numeric(reduced_variables_over[,4])
summary(oversampled_train_data)
head(reduced_variables_over[,5])
head(reduced_variables_over[,6])
head(reduced_variables_over[,7])
head(reduced_variables_over[,8])
head(reduced_variables_over[,9])
head(reduced_variables_over[,10])
reduced_variables_over = matrix(c(
as.numeric(reduced_variables_over[,1]),
as.numeric(reduced_variables_over[,2]),
as.numeric(reduced_variables_over[,3]),
as.numeric(reduced_variables_over[,4]),
as.numeric(reduced_variables_over[,5]),
as.factor(reduced_variables_over[,6]),
as.numeric(reduced_variables_over[,7]),
as.factor(reduced_variables_over[,8]),
as.numeric(reduced_variables_over[,9])
), ncol = 9)
head(reduced_variables_over)
summary(oversampled_train_data[,c(2, 3, 4, 6, 8, 9, 11, 14, 15)])
colnames(reduced_variables_over) = c("Year", "followers", "acousticness", "duration_ms",
"instrumentalness", "key", "loudness", "time_signature", "valence" )
head(reduced_variables_over)
logistic_reduced_over = glm(response_variable_over ~ reduced_variables_over, family = "binomial")
predictions_oversample = predict(logistic_reduced_over, newdata = test_set[,c(-1, -2)], type = "response")
reduced_variables_over = matrix(c(
as.numeric(reduced_variables_over[,1]),
as.numeric(reduced_variables_over[,2]),
as.numeric(reduced_variables_over[,3]),
as.numeric(reduced_variables_over[,4]),
as.numeric(reduced_variables_over[,5]),
as.factor(reduced_variables_over[,6]),
as.numeric(reduced_variables_over[,7]),
as.factor(reduced_variables_over[,8]),
as.numeric(reduced_variables_over[,9])
), ncol = 9)
colnames(reduced_variables_over) = c("Year", "followers", "acousticness", "duration_ms",
"instrumentalness", "key", "loudness", "time_signature", "valence" )
head(reduced_variables_over)
logistic_reduced_over = glm(response_variable_over ~ reduced_variables_over, family = "binomial")
predictions_oversample = predict(logistic_reduced_over, newdata = test_set[,c(-1, -2)], type = "response")
logistic_reduced_over
predictions_oversample
predictions_oversample
logistic = glm(IsWinner ~ ., data = training_set[,c(-1,-2)], family = "binomial")
summary(logistic)
log_back = stepAIC(logistic, direction = "backward")
log_for = stepAIC(logistic, direction = "forward")
log_both =  stepAIC(logistic, direction = "both")
logistic_reduced = glm(IsWinner ~ danceability + loudness + followers + valence + duration_ms + acousticness, data = training_set,  family = "binomial")
summary(logistic_reduced)
predictions = predict(logistic_reduced, newdata = test_set[,c(-1, -2)], type = "response")
predictions_04 = ifelse(predictions > 0.4, 1, 0)
accuracy_04 = sum(predictions_04 == test_set[2]) / dim(test_set[2])[1]
predictions_05 = ifelse(predictions > 0.5, 1, 0)
accuracy_05 = sum(predictions_05 == test_set[2]) / dim(test_set[2])[1]
predictions_06 = ifelse(predictions > 0.6, 1, 0)
accuracy_06 = sum(predictions_06 == test_set[2]) / dim(test_set[2])[1]
# Oversampling
oversampled_train_data = ovun.sample(IsWinner ~., data = training_set[-1], method = "over", p = 0.5, seed = 42)$data
sum(oversampled_train_data$IsWinner == 0)
sum(oversampled_train_data$IsWinner == 1)
logistic_over = glm(as.numeric(unlist(oversampled_train_data[1])) ~ ., data = oversampled_train_data[-1], family = "binomial")
summary(logistic_over)
log_over_back = stepAIC(logistic_over, direction = "backward")
log_over_for = stepAIC(logistic_over, direction = "forward")
log_over_both =  stepAIC(logistic_over, direction = "both")
response_variable_over = as.numeric(unlist(oversampled_train_data[1]))
reduced_variables_over = as.matrix(oversampled_train_data[,c(2, 3, 4, 6, 8, 9, 11, 14, 15)], ncol = 9)
reduced_variables_over = matrix(c(
as.numeric(reduced_variables_over[,1]),
as.numeric(reduced_variables_over[,2]),
as.numeric(reduced_variables_over[,3]),
as.numeric(reduced_variables_over[,4]),
as.numeric(reduced_variables_over[,5]),
as.factor(reduced_variables_over[,6]),
as.numeric(reduced_variables_over[,7]),
as.factor(reduced_variables_over[,8]),
as.numeric(reduced_variables_over[,9])
), ncol = 9)
colnames(reduced_variables_over) = c("Year", "followers", "acousticness", "duration_ms",
"instrumentalness", "key", "loudness", "time_signature", "valence" )
head(reduced_variables_over)
logistic_reduced_over = glm(response_variable_over ~ reduced_variables_over, family = "binomial")
predictions_oversample = predict(logistic_reduced_over, newdata = test_set[,c(-1, -2)], type = "response")
logistic_reduced_over = glm(response_variable_over ~ reduced_variables_over, data = reduced_variables_over,  family = "binomial")
logistic_reduced_over = glm(response_variable_over ~ reduced_variables_over, data = oversampled_train_data,  family = "binomial")
predictions_oversample = predict(logistic_reduced_over, newdata = test_set[,c(-1, -2)], type = "response")
summary(test_set)
table(test_set[2], predictions_04)
table(test_set$IsWinner, predictions_04)
table(test_set$IsWinner, predictions_05)
predictions_05 = ifelse(predictions > 0.5, 1, 0)
accuracy_05 = sum(predictions_05 == test_set[2]) / dim(test_set[2])[1]
table(test_set$IsWinner, predictions_05)
predictions = predict(logistic_reduced, newdata = test_set[,c(-1, -2)], type = "response")
predictions_03 = ifelse(predictions > 0.3, 1, 0)
accuracy_03 = sum(predictions_03 == test_set[2]) / dim(test_set[2])[1]
accuracy_03
table(test_set$IsWinner, predictions_04)
predictions_02 = ifelse(predictions > 0.2, 1, 0)
accuracy_02 = sum(predictions_02 == test_set[2]) / dim(test_set[2])[1]
accuracy_02
table(test_set$IsWinner, predictions_02)
predictions_03 = ifelse(predictions > 0.3, 1, 0)
accuracy_03 = sum(predictions_03 == test_set[2]) / dim(test_set[2])[1]
table(test_set$IsWinner, predictions_03)
table(test_set$IsWinner, predictions_02)
logistic_predictions = predict(logistic_reduced, newdata = test_set[,c(-1, -2)], type = "response")
logistic_predictions_02 = ifelse(logistic_predictions > 0.2, 1, 0)
logistic_accuracy_02 = sum(logistic_predictions_02 == test_set[2]) / dim(test_set[2])[1]
table(test_set$IsWinner, logistic_predictions_02)
logistic_predictions_03 = ifelse(logistic_predictions > 0.3, 1, 0)
logistic_accuracy_03 = sum(logistic_predictions_03 == test_set[2]) / dim(test_set[2])[1]
table(test_set$IsWinner, logistic_predictions_03)
logistic_predictions_04 = ifelse(logistic_predictions > 0.4, 1, 0)
logistic_accuracy_04 = sum(logistic_predictions_04 == test_set[2]) / dim(test_set[2])[1]
table(test_set$IsWinner, logistic_predictions_04)
table(test_set$IsWinner, logistic_predictions_04)
summary(logistic_reduced)
help(df)
help("data.frame")
summary(test_set)
logistic_predictions == predict(logistic_reduced, newdata = test_set[,c(-1, -2, -3, -8, -9, -10, -11, -13, -14, -15)], type = "response")
table(test_set$IsWinner, logistic_predictions_02)
table(test_set$IsWinner, logistic_predictions_02)[0]
str(table(test_set$IsWinner, logistic_predictions_02))
table(test_set$IsWinner, logistic_predictions_02)[1]
table(test_set$IsWinner, logistic_predictions_02)[2]
table(test_set$IsWinner, logistic_predictions_02)[3]
table(test_set$IsWinner, logistic_predictions_02)[3]
table(test_set$IsWinner, logistic_predictions_02)[1]
table(test_set$IsWinner, logistic_predictions_02)[2]
logistic_predictions_02 = ifelse(logistic_predictions > 0.2, 1, 0)
logistic_accuracy_02 = sum(logistic_predictions_02 == test_set[2]) / dim(test_set[2])[1]
table(test_set$IsWinner, logistic_predictions_02)
false_positive_logistic_02 = table(test_set$IsWinner, logistic_predictions_02)[3]
negative_logistic_02 = table(test_set$IsWinner, logistic_predictions_02)[1] + table(test_set$IsWinner, logistic_predictions_02)[2]
typeIerror_logistic_02 = false_positive_logistic_02 / negative_logistic_02
typeIerror_logistic_02
table(test_set$IsWinner, logistic_predictions_03)
negative_logistic_03 = table(test_set$IsWinner, logistic_predictions_03)[1] + table(test_set$IsWinner, logistic_predictions_03)[2]
typeIerror_logistic_03 = false_positive_logistic_03 / negative_logistic_03
false_positive_logistic_03 = table(test_set$IsWinner, logistic_predictions_03)[3]
negative_logistic_03 = table(test_set$IsWinner, logistic_predictions_03)[1] + table(test_set$IsWinner, logistic_predictions_03)[2]
typeIerror_logistic_03 = false_positive_logistic_03 / negative_logistic_03
typeIerror_logistic_03
false_positive_logistic_03
negative_logistic_03
table(test_set$IsWinner, logistic_predictions_03)
table(test_set$IsWinner, logistic_predictions_04)
false_positive_logistic_04 = table(test_set$IsWinner, logistic_predictions_04)[3]
negative_logistic_04 = table(test_set$IsWinner, logistic_predictions_04)[1] + table(test_set$IsWinner, logistic_predictions_04)[2]
typeIerror_logistic_04 = false_positive_logistic_04 / negative_logistic_04
typeIerror_logistic_04
table(test_set$IsWinner, logistic_predictions_02)
table(test_set$IsWinner, logistic_predictions_02)[4]
table(test_set$IsWinner, logistic_predictions_02)[3]
positive_logistic_02 = table(test_set$IsWinner, logistic_predictions_02)[1] + table(test_set$IsWinner, logistic_predictions_02)[4]
table(test_set$IsWinner, logistic_predictions_02)[1]
table(test_set$IsWinner, logistic_predictions_02)[2]
true_positive_logistic_02 = table(test_set$IsWinner, logistic_predictions_02)[4]
positive_logistic_02 = table(test_set$IsWinner, logistic_predictions_02)[2] + table(test_set$IsWinner, logistic_predictions_02)[4]
sensitivity_logistic_02 = true_positive_logistic_02 / positive_logistic_02
sensitivity_logistic_02
typeIerror_logistic_02
typeIerror_logistic_02
true_positive_logistic_03 = table(test_set$IsWinner, logistic_predictions_03)[4]
positive_logistic_03 = table(test_set$IsWinner, logistic_predictions_03)[2] + table(test_set$IsWinner, logistic_predictions_03)[4]
sensitivity_logistic_03 = true_positive_logistic_03 / positive_logistic_03
positive_logistic_03
sensitivity_logistic_03
true_positive_logistic_04 = table(test_set$IsWinner, logistic_predictions_04)[4]
positive_logistic_04 = table(test_set$IsWinner, logistic_predictions_04)[2] + table(test_set$IsWinner, logistic_predictions_04)[4]
sensitivity_logistic_04 = true_positive_logistic_04 / positive_logistic_04
sensitivity_logistic_04
library(pROC)
help(roc)
